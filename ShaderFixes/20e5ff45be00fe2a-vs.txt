// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 20e5ff45be00fe2a-vs.txt
// 3DMigoto: 20e5ff45be00fe2a | Matched 3 variants of 1 shaders: Nature/SpeedTree Billboard
//
//       Unity headers extracted from SpeedTreeBillboard.shader
//       Shader "Nature/SpeedTree Billboard" {
//         Properties {
//          _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//          _SpecColor ("Specular Color", Color) = (0.500000,0.500000,0.500000,0.000000)
//          _HueVariation ("Hue Variation", Color) = (1.000000,0.500000,0.000000,0.100000)
//          _MainTex ("Base (RGB)", 2D) = "white" { }
//          _BumpMap ("Normalmap", 2D) = "bump" { }
//          _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//         [MaterialEnum(None,0,Fastest,1)]  _WindQuality ("Wind Quality", Range(0.000000,1.000000)) = 0.000000
//         }
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 1/2 {
//           LOD 400
//           Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//           Pass 2/7 {
//             Name "FORWARD"
//             Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//             ZWrite Off
//             Cull Off
//             Blend One One
//             GpuProgramID 85699
//             Program "vp" {
//               SubProgram "d3d11 " {
// 1:              GpuProgramIndex 1101
// 2:              GpuProgramIndex 1111
// 4:              GpuProgramIndex 1121
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from SpeedTreeBillboard.shader.decompressed:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201510240 80 0 0
// 2:   Keywords { "DIRECTIONAL" "FOG_EXP" "LOD_FADE_CROSSFADE" }
// 4:   Keywords { "DIRECTIONAL" "FOG_EXP2" "LOD_FADE_CROSSFADE" }
// 1:   Keywords { "DIRECTIONAL" "FOG_LINEAR" "LOD_FADE_CROSSFADE" }
//      undeciphered2: 1 0 6 0 0 0
//      undeciphered3: 25 3 0 0 3 4 4 5
//      ConstBuffer "$Globals" 160
//      Float 132 [_WindQuality]
//      Float 136 [_WindEnabled]
//      Vector 144 [_Color]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      Vector 96 [_ScreenParams]
//      ConstBuffer "UnityPerDraw" 352
//      Matrix 0 [glstate_matrix_mvp]
//      Matrix 192 [unity_ObjectToWorld]
//      Matrix 256 [unity_WorldToObject]
//      ConstBuffer "SpeedTreeWind" 256
//      Vector 0 [_ST_WindVector]
//      Vector 16 [_ST_WindGlobal]
//      Vector 96 [_ST_WindBranchAdherences]
//      ConstBuffer "UnityBillboardPerCamera" 48
//      Vector 0 [unity_BillboardNormal] 3
//      Vector 16 [unity_BillboardTangent] 3
//      Vector 32 [unity_BillboardCameraParams]
//      ConstBuffer "UnityBillboardPerBatch" 288
//      Vector 0 [unity_BillboardInfo]
//      Vector 16 [unity_BillboardSize]
//      Vector 32 [unity_BillboardImageTexCoords0]
//      Vector 48 [unity_BillboardImageTexCoords1]
//      Vector 64 [unity_BillboardImageTexCoords2]
//      Vector 80 [unity_BillboardImageTexCoords3]
//      Vector 96 [unity_BillboardImageTexCoords4]
//      Vector 112 [unity_BillboardImageTexCoords5]
//      Vector 128 [unity_BillboardImageTexCoords6]
//      Vector 144 [unity_BillboardImageTexCoords7]
//      Vector 160 [unity_BillboardImageTexCoords8]
//      Vector 176 [unity_BillboardImageTexCoords9]
//      Vector 192 [unity_BillboardImageTexCoords10]
//      Vector 208 [unity_BillboardImageTexCoords11]
//      Vector 224 [unity_BillboardImageTexCoords12]
//      Vector 240 [unity_BillboardImageTexCoords13]
//      Vector 256 [unity_BillboardImageTexCoords14]
//      Vector 272 [unity_BillboardImageTexCoords15]
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerDraw" 2
//      BindCB "SpeedTreeWind" 3
//      BindCB "UnityBillboardPerCamera" 4
//      BindCB "UnityBillboardPerBatch" 5
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 06:09:29 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float       
// TANGENT                  0   xyzw        4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 6      w        1     NONE   float      w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
//
vs_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[19], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_constantbuffer cb5[18], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyzw
dcl_output o4.xyz
dcl_output o5.xyz
dcl_temps 4

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r3.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.xy, v0.xyxx, cb2[15].xyxx
add r1.x, r0.x, v2.w
mad r1.y, v2.w, l(0.800000), r0.y
add r0.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r0.xy, r0.xyxx
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r0.zw, |r0.xxxy|, |r0.xxxy|
mad r0.xy, -|r0.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r0.xy, r0.zwzz, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, r0.xyxx
mad r0.x, r0.y, r0.y, r0.x
div r0.y, cb3[6].x, cb3[1].z
mad r0.x, cb3[1].y, r0.x, r0.y
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[1].z
mad r0.z, v1.y, cb5[1].y, cb5[1].z
add r0.w, v1.x, l(-0.500000)
mul r0.w, r0.w, cb5[1].x
mul r0.w, r0.w, v2.x
mul r1.xyz, r0.wwww, cb4[1].xyzx
mad r1.w, r0.z, v2.y, r1.y
mad r0.y, -r0.y, l(0.250000), r1.w
max r0.y, r0.y, l(0.000000)
mul r0.y, r0.y, cb3[1].z
log r0.z, r0.y
mul r0.z, r0.z, cb3[1].w
exp r0.z, r0.z
ne r0.w, r0.y, l(0.000000)
movc r0.y, r0.w, r0.z, r0.y
mul r0.x, r0.y, r0.x
mad r0.xz, cb3[0].xxzx, r0.xxxx, r1.xxzx
mov r0.y, r1.w
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
dp3 r0.w, r1.xzwx, r1.xzwx
sqrt r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
mul r0.w, cb0[8].z, cb0[8].y
lt r0.w, l(0.000000), r0.w
movc r0.xyz, r0.wwww, r0.xyzx, r1.xwzx
add r0.xyz, r0.xyzx, v0.xyzx
mul r1.xyzw, r0.yyyy, cb2[1].xyzw
mad r1.xyzw, cb2[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb2[2].xyzw, r0.zzzz, r1.xyzw
add r1.xyzw, r1.xyzw, cb2[3].xyzw
mov o0.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 20e5ff45be00fe2a-vs.txt
ne r3.w, r1.w, l(1.0)
if_nz r3.w
  add r3.w, r1.w, -r3.y
  mad r1.x, r3.w, r3.x, r1.x
endif

mov o1.w, r1.z
mul r1.x, cb2[16].x, cb4[0].x
mul r1.y, cb2[17].x, cb4[0].x
mul r1.z, cb2[18].x, cb4[0].x
mul r2.x, cb2[16].y, cb4[0].y
mul r2.y, cb2[17].y, cb4[0].y
mul r2.z, cb2[18].y, cb4[0].y
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.x, cb2[16].z, cb4[0].z
mul r2.y, cb2[17].z, cb4[0].z
mul r2.z, cb2[18].z, cb4[0].z
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul o1.xyz, r0.wwww, r1.xyzx
mul r1.xyz, r0.yyyy, cb2[13].xyzx
mad r1.xyz, cb2[12].xyzx, r0.xxxx, r1.xyzx
mad r1.xyz, cb2[14].xyzx, r0.zzzz, r1.xyzx
add o2.xyz, r1.xyzx, cb2[15].xyzx
mov o3.xyzw, cb0[9].xyzw
add r0.w, v2.z, cb4[2].w
mad r0.w, r0.w, cb5[0].y, l(0.500000)
round_ni r0.w, r0.w
div r0.w, r0.w, cb5[0].x
ge r1.x, r0.w, -r0.w
frc r0.w, |r0.w|
movc r0.w, r1.x, r0.w, -r0.w
mul r0.w, r0.w, cb5[0].x
ftou r0.w, r0.w
lt r1.x, cb5[r0.w + 2].w, l(0.000000)
mad r1.yz, -cb5[r0.w + 2].zzwz, v1.yyxy, cb5[r0.w + 2].xxyx
mad r2.xy, cb5[r0.w + 2].zwzz, v1.xyxx, cb5[r0.w + 2].xyxx
movc o4.xy, r1.xxxx, r1.yzyy, r2.xyxx
mov o4.z, l(0)
mul r1.xyz, r0.yyyy, cb2[1].xywx
mad r0.xyw, cb2[0].xyxw, r0.xxxx, r1.xyxz
mad r0.xyz, cb2[2].xywx, r0.zzzz, r0.xywx
add r0.xyz, r0.xyzx, cb2[3].xywx
mul r1.xz, r0.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.x, r0.y, cb1[5].x
mov o5.z, r0.z
mul r1.w, r0.x, l(0.500000)
add r0.xy, r1.zzzz, r1.xwxx
mul r0.zw, cb1[6].xxxy, l(0.000000, 0.000000, 0.250000, 0.250000)
mul o5.xy, r0.zwzz, r0.xyxx
ret 
// Approximately 0 instruction slots used