// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed fedf6f6e0bf1f999-ps.txt
// 3DMigoto: fedf6f6e0bf1f999 | Matched 2 variants of 1 shaders: Chickenlord/Rim Lighting
//
//       Unity headers extracted from Rim_Opaque.shader
//       Shader "Chickenlord/Rim Lighting" {
//         Properties {
//          _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//          _SpecColor ("Specular Color", Color) = (0.500000,0.500000,0.500000,1.000000)
//          _RimColor ("Rim Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//          _Shininess ("Shininess", Range(0.010000,1.000000)) = 0.078125
//          _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" { }
//          _BumpMap ("Normalmap", 2D) = "bump" { }
//          _RS ("Rim Power", Range(0.200000,6.000000)) = 2.500000
//         }
//         Fallback "Diffuse"
//         SubShader 1/1 {
//           LOD 200
//           Tags { "RenderType"="Opaque" }
//           Pass 1/5 {
//             Name "FORWARD"
//             Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//             GpuProgramID 43803
//             Program "fp" {
//               SubProgram "d3d11_9x " {
// 1:              GpuProgramIndex 77
// 2:              GpuProgramIndex 89
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Rim_Opaque.shader.decompressed:
//      API d3d11_9x
//      Shader model ps_4_0_level_9_1
//      undeciphered1: 201510240 40 4 0
// 2:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" }
// 1:   Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_ON" "DYNAMICLIGHTMAP_OFF" "FOG_LINEAR" }
//      undeciphered2: 1 4 5 4 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 208
//      Vector 64 [unity_Lightmap_HDR]
//      Vector 96 [_LightColor0]
//      Vector 128 [_Color]
//      Vector 144 [_RimColor]
//      Float 164 [_RS]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      ConstBuffer "UnityLighting" 720
//      Vector 0 [_WorldSpaceLightPos0]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      ConstBuffer "UnityFog" 32
//      Vector 0 [unity_FogColor]
//      SetTexture 0 [_MainTex] 2D 2
//      SetTexture 1 [_BumpMap] 2D 3
//      SetTexture 2 [_ShadowMapTexture] 2D 1
//      SetTexture 3 [unity_Lightmap] 2D 0
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityShadows" 3
//      BindCB "UnityFog" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.61 on Thu Aug 17 02:04:59 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 5   xyzw        6     NONE   float   xy w
// TEXCOORD                 6   x           7     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             4         1  ( FLT, FLT, FLT, FLT)
// c1         cb0             6         1  ( FLT, FLT, FLT, FLT)
// c2         cb0             8         3  ( FLT, FLT, FLT, FLT)
// c5         cb1             4         1  ( FLT, FLT, FLT, FLT)
// c6         cb2             0         1  ( FLT, FLT, FLT, FLT)
// c7         cb3            24         1  ( FLT, FLT, FLT, FLT)
// c8         cb4             0         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t3               
// s1             s1              t2               
// s2             s2              t0               
// s3             s3              t1               
//
//
// Level9 shader bytecode:
//
    ps_2_0
    def c9, 2, -1, 0, 1
    dcl t0
    dcl t1
    dcl t2
    dcl t3
    dcl t4
    dcl t5
    dcl t6.x
    dcl_2d s0
    dcl_2d s1
    dcl_2d s2
    dcl_2d s3
    mov r0.x, t0.z
    mov r0.y, t0.w
    rcp r0.z, t5.w
    mul r1.xy, r0.z, t5
    texld_pp r0, r0, s3
    texld_pp r1, r1, s1
    texld_pp r2, t4, s0
    texld_pp r3, t0, s2
    mad_pp r4.x, r0.w, c9.x, c9.y
    mad_pp r4.y, r0.y, c9.x, c9.y
    dp2add_sat_pp r3.w, r4, r4, c9.z
    add_pp r3.w, -r3.w, c9.w
    rsq_pp r3.w, r3.w
    rcp_pp r4.z, r3.w
    dp3_pp r0.x, t1, r4
    dp3_pp r0.y, t2, r4
    dp3_pp r0.z, t3, r4
    dp3_sat_pp r3.w, r0, c6
    add_pp r4.w, -r1.x, c9.w
    mul_pp r3.w, r3.w, r4.w
    mul_pp r2.w, r2.w, c0.x
    mul_pp r0.xyz, r2, r2.w
    mad_pp r1.yzw, r3.w, -c1.wzyx, r0.wzyx
    mul_pp r5.xyz, r1.x, r2
    max_pp r6.xyz, r5, r1.wzyx
    mad_pp r1.xyz, r2.w, r2, -r6
    mad_pp r1.xyz, c7.x, r1, r6
    min_pp r2.xyz, r1, r0
    mov r0.x, -t1.w
    mov r0.y, -t2.w
    mov r0.z, -t3.w
    add r0.xyz, r0, c5
    nrm_pp r1.xyz, r0
    mul r0.xyz, r1.y, t2
    mad r0.xyz, t1, r1.x, r0
    mad_pp r0.xyz, t3, r1.z, r0
    nrm r1.xyz, r0
    dp3_sat r2.w, r4, r1
    add r2.w, -r2.w, c9.w
    pow r3.w, r2.w, c4.y
    mul_pp r0.xyz, r3.w, c3
    mul_pp r1.xyz, r3, c2
    mad_pp r0.xyz, r1, r2, r0
    mov_sat r0.w, t6.x
    lrp_pp r1.xyz, r0.w, r0, c8
    mov r1.w, c9.w
    mov_pp oC0, r1

// approximately 54 instruction slots used (4 texture, 50 arithmetic)
ps_4_0
dcl_constantbuffer cb0[11], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[1], immediateIndexed
dcl_constantbuffer cb3[25], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyw
dcl_input_ps linear v7.x
dcl_output o0.xyzw
dcl_temps 7
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed fedf6f6e0bf1f999-ps.txt

mul r5.w, -r5.x, r5.y
mad r6.xyz, -r5.wwww, cb10[0].xyzw, cb1[4].xyzw

sample r0.xyzw, v1.zwzz, t1.xyzw, s3
mad r0.xy, r0.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r0.xyxx, r0.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r0.z, r0.w
dp3 r1.x, v2.xyzx, r0.xyzx
dp3 r1.y, v3.xyzx, r0.xyzx
dp3 r1.z, v4.xyzx, r0.xyzx
dp3_sat r0.w, r1.xyzx, cb2[0].xyzx
div r1.xy, v6.xyxx, v6.wwww
sample r1.xyzw, r1.xyxx, t2.xyzw, s1
add r1.y, -r1.x, l(1.000000)
mul r0.w, r0.w, r1.y
sample r2.xyzw, v5.xyxx, t3.xyzw, s0
mul r1.y, r2.w, cb0[4].x
mul r3.xyz, r2.xyzx, r1.yyyy
mad r4.xyz, -r0.wwww, cb0[6].xyzx, r3.xyzx
mul r1.xzw, r1.xxxx, r2.xxyz
max r1.xzw, r4.xxyz, r1.xxzw
mad r2.xyz, r1.yyyy, r2.xyzx, -r1.xzwx
mad r1.xyz, cb3[24].xxxx, r2.xyzx, r1.xzwx
min r1.xyz, r1.xyzx, r3.xyzx
mov r2.x, v2.w
mov r2.y, v3.w
mov r2.z, v4.w
add r2.xyz, -r2.xyzx, r6.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r3.xyz, r2.yyyy, v3.xyzx
mad r2.xyw, v2.xyxz, r2.xxxx, r3.xyxz
mad r2.xyz, v4.xyzx, r2.zzzz, r2.xywx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
dp3_sat r0.x, r0.xyzx, r2.xyzx
add r0.x, -r0.x, l(1.000000)
log r0.x, r0.x
mul r0.x, r0.x, cb0[10].y
exp r0.x, r0.x
mul r0.xyz, r0.xxxx, cb0[9].xyzx
sample r2.xyzw, v1.xyxx, t0.xyzw, s2
mul r2.xyz, r2.xyzx, cb0[8].xyzx
mad r0.xyz, r2.xyzx, r1.xyzx, r0.xyzx
add r0.xyz, r0.xyzx, -cb4[0].xyzx
mov_sat r0.w, v7.x
mad o0.xyz, r0.wwww, r0.xyzx, cb4[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used