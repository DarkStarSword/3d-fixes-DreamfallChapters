// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 6eab5ce04cc3e4ee-ps_replace.txt
// 3DMigoto: 6eab5ce04cc3e4ee |    Unity headers extracted from ShadowSoftener-PrePassLighting.shader
//    Shader "Hidden/ShadowSoftener-PrePassLighting" {
//      Properties {
//       _LightTexture0 ("", any) = "" { }
//       _LightTextureB0 ("", 2D) = "" { }
//       _ShadowMapTexture ("", any) = "" { }
//      }
//      Fallback "Hidden/Internal-PrePassLighting"
//      SubShader 1/1 {
//        Pass 1/3 {
//          Tags { "SHADOWSUPPORT"="true" }
//          ZWrite Off
//          Blend DstColor Zero
//          GpuProgramID 58752
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 37
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from ShadowSoftener-PrePassLighting.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201510240 94 3 2
//   Keywords { "SPOT" "SHADOWS_DEPTH" }
//   undeciphered2: 1 5 4 5 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 256
//   Vector 0 [_ShadowMapTexture_TexelSize]
//   Vector 64 [unity_ColorSpaceLuminance]
//   Vector 144 [_LightPos]
//   Vector 160 [_LightColor]
//   Vector 176 [unity_LightmapFade]
//   Matrix 192 [unity_WorldToLight]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   Vector 80 [_ProjectionParams]
//   Vector 112 [_ZBufferParams]
//   ConstBuffer "UnityPerCameraRare" 352
//   Matrix 288 [unity_CameraToWorld]
//   ConstBuffer "UnityShadows" 416
//   Vector 80 [unity_LightShadowBias]
//   Vector 384 [_LightShadowData]
//   Vector 400 [unity_ShadowFadeCenterAndType]
//   Matrix 128 [unity_WorldToShadow0]
//   Matrix 192 [unity_WorldToShadow1]
//   Matrix 256 [unity_WorldToShadow2]
//   Matrix 320 [unity_WorldToShadow3]
//   SetTexture 0 [_CameraDepthTexture] 2D 1
//   SetTexture 1 [_LightTexture0] 2D 3
//   SetTexture 2 [_LightTextureB0] 2D 2
//   SetTexture 3 [_CameraNormalsTexture] 2D 4
//   SetTexture 4 [_ShadowMapTexture] 2D 0
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityPerCameraRare" 2
//   BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.52 on Tue Jan 31 06:31:01 2017
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerComparisonState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 6eab5ce04cc3e4ee-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s1_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;
float depth = r2.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 6eab5ce04cc3e4ee-ps_replace.txt
if (fov) {
  r2.x -= separation * (depth - convergence) * fov;
}

  r3.xyz = cb2[19].xyz * r2.yyy;
  r2.xyw = cb2[18].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb2[20].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb2[21].xyz + r2.xyw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r2.xyw -= world_space_adj.xyz;
}

  r3.xyz = -cb3[25].xyz + r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -r0.z * r0.w + r0.x;
  r0.x = cb3[25].w * r0.x + r2.z;
  r0.yzw = cb0[9].xyz + -r2.xyw;
  r1.z = dot(r0.yzw, r0.yzw);
  r1.w = rsqrt(r1.z);
  r0.yzw = r1.www * r0.yzw;
  r3.xyz = cb0[13].xyw * r2.yyy;
  r3.xyz = cb0[12].xyw * r2.xxx + r3.xyz;
  r3.xyz = cb0[14].xyw * r2.www + r3.xyz;
  r3.xyz = cb0[15].xyw + r3.xyz;
  r3.xy = r3.xy / r3.zz;
  r4.xyzw = t1.SampleBias(s3_s, r3.xy, -8).xyzw;
  r1.w = cmp(r3.z < 0);
  r1.w = r1.w ? 1.000000 : 0;
  r1.w = r4.w * r1.w;
  r1.z = cb0[9].w * r1.z;
  r3.xyzw = t2.Sample(s2_s, r1.zz).xyzw;
  r1.z = r3.x * r1.w;
  r1.w = saturate(r0.x * cb3[24].z + cb3[24].w);
  r3.xyzw = cb3[9].xyzw * r2.yyyy;
  r3.xyzw = cb3[8].xyzw * r2.xxxx + r3.xyzw;
  r3.xyzw = cb3[10].xyzw * r2.wwww + r3.xyzw;
  r3.xyzw = cb3[11].xyzw + r3.xyzw;
  r3.xyz = r3.xyz / r3.www;
  r4.xy = float2(0.5,0.5) * cb0[0].xy;
  r3.xy = -cb0[0].xy * float2(3.5,3.5) + r3.xy;
  r3.xy = cb0[0].zw * r3.xy;
  r4.zw = frac(r3.xy);
  r5.xy = float2(1,1) + -r4.zw;
  r3.xy = floor(r3.xy);
  r3.xy = r3.xy * cb0[0].xy + r4.xy;
  r2.z = 0;
  r3.w = 0;
  while (true) {
    r4.x = cmp((int)r3.w >= 8);
    if (r4.x != 0) break;
    r4.x = cmp((int)r3.w == 7);
    r4.x = r4.x ? r4.w : 1;
    r4.x = r3.w ? r4.x : r5.y;
    r6.y = (int)r3.w;
    r4.y = r2.z;
    r5.z = 0;
    while (true) {
      r5.w = cmp((int)r5.z >= 8);
      if (r5.w != 0) break;
      r6.x = (int)r5.z;
      r6.zw = float2(-4,-4) + r6.xy;
      r5.w = dot(r6.zw, r6.zw);
      r5.w = sqrt(r5.w);
      r6.xz = r6.xy * cb0[0].xy + r3.xy;
      r5.w = cb3[5].x * r5.w;
      r5.w = -r5.w * 0.00999999978 + r3.z;
      r5.w = t4.SampleCmpLevelZero(s0_s, r6.xz, r5.w).x;
      r5.w = cmp(r5.w >= 0.5);
      r5.w = r5.w ? 1.000000 : 0;
      r6.x = cmp((int)r5.z == 7);
      r6.x = r6.x ? r4.z : 1;
      r6.x = r5.z ? r6.x : r5.x;
      r5.w = r6.x * r5.w;
      r4.y = r5.w * r4.x + r4.y;
      r5.z = (int)r5.z + 1;
    }
    r2.z = r4.y;
    r3.w = (int)r3.w + 1;
  }
  r1.w = saturate(r2.z * 0.0204081628 + r1.w);
  r1.z = r1.z * r1.w;
  r3.xyzw = t3.Sample(s4_s, r1.xy).xyzw;
  r1.xyw = r3.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.z = dot(r1.xyw, r1.xyw);
  r2.z = rsqrt(r2.z);
  r1.xyw = r2.zzz * r1.xyw;
  r2.z = dot(r0.yzw, r1.xyw);
  r2.z = max(0, r2.z);
  r2.xyw = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r3.x = dot(r2.xyw, r2.xyw);
  r3.x = rsqrt(r3.x);
  r0.yzw = -r2.xyw * r3.xxx + r0.yzw;
  r2.x = dot(r0.yzw, r0.yzw);
  r2.x = rsqrt(r2.x);
  r0.yzw = r2.xxx * r0.yzw;
  r0.y = dot(r0.yzw, r1.xyw);
  r0.y = max(0, r0.y);
  r0.z = 128 * r3.w;
  r0.y = log2(r0.y);
  r0.y = r0.z * r0.y;
  r0.y = exp2(r0.y);
  r0.z = saturate(r1.z);
  r0.y = r0.y * r0.z;
  r0.z = r2.z * r1.z;
  r1.xyz = cb0[10].xyz * r0.zzz;
  r2.xyz = cb0[10].xyz * cb0[4].xyz;
  r0.zw = r2.xx + r2.yz;
  r0.z = cb0[10].z * cb0[4].z + r0.z;
  r0.w = r2.y * r0.w;
  r0.w = sqrt(r0.w);
  r0.w = dot(cb0[4].ww, r0.ww);
  r0.z = r0.z + r0.w;
  r1.w = r0.y * r0.z;
  r0.x = r0.x * cb0[11].z + cb0[11].w;
  r0.x = saturate(1 + -r0.x);
  r0.xyzw = r1.xyzw * r0.xxxx;
  o0.xyzw = exp2(-r0.xyzw);
  return;
}
