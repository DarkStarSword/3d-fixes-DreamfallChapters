// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe a2ec90f26699f691-ps_replace.txt
// 3DMigoto: a2ec90f26699f691 | Matched 2 variants of 1 shaders: Hidden/ShadowSoftener-PrePassLighting
//
//       Unity headers extracted from ShadowSoftener-PrePassLighting.shader
//       Shader "Hidden/ShadowSoftener-PrePassLighting" {
//         Properties {
//          _LightTexture0 ("", any) = "" { }
//          _LightTextureB0 ("", 2D) = "" { }
//          _ShadowMapTexture ("", any) = "" { }
//         }
//         Fallback "Hidden/Internal-PrePassLighting"
//         SubShader 1/1 {
//           Pass 3/3 {
//             Tags { "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Blend One One
//             GpuProgramID 168276
//             Program "fp" {
//               SubProgram "d3d11 " {
// 2:              GpuProgramIndex 101
// 1:              GpuProgramIndex 95
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from ShadowSoftener-PrePassLighting.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 72 7 1
// 2:   Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
// 1:   Keywords { "POINT" "SHADOWS_CUBE" }
//      undeciphered2: 1 4 5 4 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 272
//      Vector 64 [unity_ColorSpaceLuminance]
//      Vector 144 [_LightPos]
//      Vector 160 [_LightColor]
//      Vector 176 [unity_LightmapFade]
//      Vector 256 [_CameraNormalsTexture_ST]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityLighting" 720
//      Vector 16 [_LightPositionRange]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      SetTexture 0 [_CameraDepthTexture] 2D 1
//      SetTexture 1 [_LightTextureB0] 2D 2
//      SetTexture 2 [_ShadowMapTexture] CUBE 0
//      SetTexture 3 [_CameraNormalsTexture] 2D 3
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityLighting" 3
//      BindCB "UnityShadows" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.52 on Mon Jul 24 22:44:07 2017
Texture2D<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[26];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[17];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe a2ec90f26699f691-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s1_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r2.xyz = r0.xyz * r0.www;
float depth = r2.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe a2ec90f26699f691-ps_replace.txt
if (fov) {
  r2.x -= separation * (depth - convergence) * fov;
}

  r3.xyz = cb2[19].xyz * r2.yyy;
  r2.xyw = cb2[18].xyz * r2.xxx + r3.xyz;
  r2.xyw = cb2[20].xyz * r2.zzz + r2.xyw; // depth in r2.z
  r2.xyw = cb2[21].xyz + r2.xyw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r2.xyw -= world_space_adj.xyz;
}

  r3.xyz = -cb4[25].xyz + r2.xyw;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = sqrt(r0.x);
  r0.x = -r0.z * r0.w + r0.x;
  r0.x = cb4[25].w * r0.x + r2.z;
  r0.yzw = -cb0[9].xyz + r2.xyw;
  r1.z = dot(r0.yzw, r0.yzw);
  r1.w = rsqrt(r1.z);
  r3.xyz = r1.www * r0.yzw;
  r1.w = cb0[9].w * r1.z;
  r4.xyzw = t1.Sample(s2_s, r1.ww).xyzw;
  r1.z = sqrt(r1.z);
  r1.z = cb3[1].w * r1.z;
  r5.xyzw = float4(0,0,0,0);
  r1.w = 0;
  while (true) {
    r2.z = cmp((int)r1.w >= 12);
    if (r2.z != 0) break;
    r2.z = (int)r1.w;
    r6.x = 1 + r2.z;
    r3.w = (int)-r1.w;
    r6.yz = float2(-1,-1) + r3.ww;
    r4.yzw = float3(0.0078125,0.0078125,0.0078125) * r6.xyz;
    r3.w = (int)r1.w & 1;
    r3.w = cmp((int)r3.w == 1);
    r4.yzw = r3.www ? -r4.yww : r4.yzw;
    r6.xyz = r4.yyy + r0.yzw;
    r6.xyzw = t2.Sample(s0_s, r6.xyz).xyzw;
    r6.yzw = r4.wwy + r0.yzw;
    r7.xyzw = t2.Sample(s0_s, r6.yzw).xyzw;
    r6.yzw = r4.wyw + r0.yzw;
    r8.xyzw = t2.Sample(s0_s, r6.yzw).xyzw;
    r4.yzw = r4.yzw + r0.yzw;
    r9.xyzw = t2.Sample(s0_s, r4.yzw).yzwx;
    r2.z = -r2.z * 0.00999999978 + 1;
    r2.z = r2.z * r1.z;
    r9.x = r6.x;
    r9.y = r7.x;
    r9.z = r8.x;
    r6.xyzw = cmp(r9.xyzw < r2.zzzz);
    r6.xyzw = r6.xyzw ? cb4[24].xxxx : float4(1,1,1,1);
    r5.xyzw = r6.xyzw + r5.xyzw;
    r1.w = (int)r1.w + 1;
  }
  r0.y = dot(r5.xyzw, float4(0.020833334,0.020833334,0.020833334,0.020833334));
  r0.y = r4.x * r0.y;
  r0.zw = r1.xy * cb0[16].xy + cb0[16].zw;
  r1.xyzw = t3.Sample(s3_s, r0.zw).xyzw;
  r1.xyz = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.z = dot(r1.xyz, r1.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r1.xyz * r0.zzz;
  r0.z = dot(-r3.xyz, r1.xyz);
  r2.xyz = -_WorldSpaceCameraPos.xyz + r2.xyw;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = -r2.xyz * r0.www + -r3.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = r2.xyz * r0.www;
  r0.w = dot(r2.xyz, r1.xyz);
  r0.zw = max(float2(0,0), r0.zw);
  r1.x = 128 * r1.w;
  r0.w = log2(r0.w);
  r0.w = r1.x * r0.w;
  r0.w = exp2(r0.w);
  r1.x = saturate(r0.y);
  r0.w = r1.x * r0.w;
  r0.y = r0.z * r0.y;
  r1.yzw = cb0[10].xyz * r0.yyy;
  r2.xyz = cb0[10].xyz * cb0[4].xyz;
  r0.yz = r2.xx + r2.yz;
  r0.y = cb0[10].z * cb0[4].z + r0.y;
  r0.z = r2.y * r0.z;
  r0.z = sqrt(r0.z);
  r0.z = dot(cb0[4].ww, r0.zz);
  r0.y = r0.y + r0.z;
  r1.x = r0.w * r0.y;
  r0.x = r0.x * cb0[11].z + cb0[11].w;
  r0.x = saturate(1 + -r0.x);
  o0.xyzw = r1.xyzw * r0.xxxx;
  return;
}
