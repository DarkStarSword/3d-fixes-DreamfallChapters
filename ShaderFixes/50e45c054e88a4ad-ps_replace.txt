// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 50e45c054e88a4ad-ps_replace.txt
// 3DMigoto: 50e45c054e88a4ad | Matched 2 variants of 1 shaders: Hidden/ShadowSoftener-DeferredShading
//
//       Unity headers extracted from ShadowSoftener-DeferredShading.shader
//       Shader "Hidden/ShadowSoftener-DeferredShading" {
//         Properties {
//          _LightTexture0 ("", any) = "" { }
//          _LightTextureB0 ("", 2D) = "" { }
//          _ShadowMapTexture ("", any) = "" { }
//          _SrcBlend ("", Float) = 1.000000
//          _DstBlend ("", Float) = 1.000000
//         }
//         Fallback "Hidden/Internal-DeferredShading"
//         SubShader 1/1 {
//           Pass 1/2 {
//             Tags { "SHADOWSUPPORT"="true" }
//             ZWrite Off
//             Blend [_SrcBlend] [_DstBlend]
//             GpuProgramID 59437
//             Program "fp" {
//               SubProgram "d3d11 " {
// 2:              GpuProgramIndex 101
// 1:              GpuProgramIndex 95
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from ShadowSoftener-DeferredShading.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 107 9 1
// 2:   Keywords { "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" "UNITY_HDR_ON" }
// 1:   Keywords { "POINT" "SHADOWS_CUBE" "UNITY_HDR_ON" }
//      undeciphered2: 1 6 5 6 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 288
//      Vector 64 [unity_ColorSpaceLuminance]
//      Vector 144 [_LightPos]
//      Vector 160 [_LightColor]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 80 [_ProjectionParams]
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityLighting" 720
//      Vector 16 [_LightPositionRange]
//      ConstBuffer "UnityShadows" 416
//      Vector 384 [_LightShadowData]
//      SetTexture 0 [_CameraDepthTexture] 2D 1
//      SetTexture 1 [_LightTextureB0] 2D 2
//      SetTexture 2 [_ShadowMapTexture] CUBE 0
//      SetTexture 3 [_CameraGBufferTexture0] 2D 3
//      SetTexture 4 [_CameraGBufferTexture1] 2D 4
//      SetTexture 5 [_CameraGBufferTexture2] 2D 5
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityLighting" 3
//      BindCB "UnityShadows" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.52 on Tue Jan 31 06:22:46 2017
Texture2D<float4> t5 : register(t5);

Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb4 : register(b4)
{
  float4 cb4[25];
}

cbuffer cb3 : register(b3)
{
  float4 cb3[2];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[11];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

// Unity reflection/specular fix inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 50e45c054e88a4ad-ps_replace.txt
matrix _CameraToWorld = matrix(cb2[18], cb2[19], cb2[20], cb2[21]);
float4 _WorldSpaceCameraPos = cb1[4];
if (fov) {
  _WorldSpaceCameraPos.xyz -= mul(float4(-separation * convergence * fov, 0, 0, 0), _CameraToWorld).xyz;
} else {
  float4 clip_space_adj = float4(-separation * convergence, 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  _WorldSpaceCameraPos.xyz -= world_space_adj.xyz;
}

  r0.x = cb1[5].z / v2.z;
  r0.xyz = v2.xyz * r0.xxx;
  r1.xy = v1.xy / v1.ww;
  r2.xyzw = t0.Sample(s1_s, r1.xy).xyzw;
  r0.w = cb1[7].x * r2.x + cb1[7].y;
  r0.w = 1 / r0.w;
  r0.xyz = r0.xyz * r0.www;
float depth = r0.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 50e45c054e88a4ad-ps_replace.txt
if (fov) {
  r0.x -= separation * (depth - convergence) * fov;
}

  r2.xyz = cb2[19].xyz * r0.yyy;
  r0.xyw = cb2[18].xyz * r0.xxx + r2.xyz;
  r0.xyz = cb2[20].xyz * r0.zzz + r0.xyw; // depth in r0.z
  r0.xyz = cb2[21].xyz + r0.xyz;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r0.xyz -= world_space_adj.xyz;
}

  r2.xyz = -cb0[9].xyz + r0.xyz;
  r0.w = dot(r2.xyz, r2.xyz);
  r1.z = rsqrt(r0.w);
  r3.xyz = r2.xyz * r1.zzz;
  r1.w = cb0[9].w * r0.w;
  r4.xyzw = t1.Sample(s2_s, r1.ww).xyzw;
  r0.w = sqrt(r0.w);
  r0.w = cb3[1].w * r0.w;
  r5.xyzw = float4(0,0,0,0);
  r1.w = 0;
  while (true) {
    r2.w = cmp((int)r1.w >= 12);
    if (r2.w != 0) break;
    r2.w = (int)r1.w;
    r6.x = 1 + r2.w;
    r3.w = (int)-r1.w;
    r6.yz = float2(-1,-1) + r3.ww;
    r4.yzw = float3(0.0078125,0.0078125,0.0078125) * r6.xyz;
    r3.w = (int)r1.w & 1;
    r3.w = cmp((int)r3.w == 1);
    r4.yzw = r3.www ? -r4.yww : r4.yzw;
    r6.xyz = r4.yyy + r2.xyz;
    r6.xyzw = t2.Sample(s0_s, r6.xyz).xyzw;
    r6.yzw = r4.wwy + r2.xyz;
    r7.xyzw = t2.Sample(s0_s, r6.yzw).xyzw;
    r6.yzw = r4.wyw + r2.xyz;
    r8.xyzw = t2.Sample(s0_s, r6.yzw).xyzw;
    r4.yzw = r4.yzw + r2.xyz;
    r9.xyzw = t2.Sample(s0_s, r4.yzw).yzwx;
    r2.w = -r2.w * 0.00999999978 + 0.970000029;
    r2.w = r2.w * r0.w;
    r9.x = r6.x;
    r9.y = r7.x;
    r9.z = r8.x;
    r6.xyzw = cmp(r9.xyzw < r2.wwww);
    r6.xyzw = r6.xyzw ? cb4[24].xxxx : float4(1,1,1,1);
    r5.xyzw = r6.xyzw + r5.xyzw;
    r1.w = (int)r1.w + 1;
  }
  r0.w = dot(r5.xyzw, float4(0.020833334,0.020833334,0.020833334,0.020833334));
  r0.w = r4.x * r0.w;
  r4.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r5.xyzw = t4.Sample(s4_s, r1.xy).xyzw;
  r6.xyzw = t5.Sample(s5_s, r1.xy).xyzw;
  r1.xyw = cb0[10].xyz * r0.www;
  r6.xyz = r6.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.w = dot(r6.xyz, r6.xyz);
  r0.w = rsqrt(r0.w);
  r6.xyz = r6.xyz * r0.www;
  r0.xyz = -_WorldSpaceCameraPos.xyz + r0.xyz;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = dot(r6.xyz, -r3.xyz);
  r7.xyzw = float4(1,1,1,1) + -r5.wxyz;
  r2.xyz = -r2.xyz * r1.zzz + -r0.xyz;
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = max(0.00100000005, r1.z);
  r1.z = rsqrt(r1.z);
  r2.xyz = r2.xyz * r1.zzz;
  r1.z = dot(r6.xyz, r2.xyz);
  r1.z = max(0, r1.z);
  r0.x = dot(r6.xyz, -r0.xyz);
  r0.y = dot(-r3.xyz, r2.xyz);
  r0.xyw = max(float3(0,0,0), r0.xyw);
  r0.z = r7.x * r7.x;
  r2.x = 0.797884583 * r0.z;
  r0.z = -r0.z * 0.797884583 + 1;
  r2.y = r0.w * r0.z + r2.x;
  r0.z = r0.x * r0.z + r2.x;
  r0.z = r2.y * r0.z + 9.99999975e-006;
  r0.z = 1 / r0.z;
  r2.x = 1 + -r7.x;
  r2.x = r2.x * 0.967999995 + 0.0299999993;
  r2.x = log2(r2.x);
  r2.x = 10 / r2.x;
  r2.y = r2.x * r2.x;
  r2.x = r2.x * r2.x + 2;
  r2.x = 0.159154937 * r2.x;
  r1.z = log2(r1.z);
  r1.z = r2.y * r1.z;
  r1.z = exp2(r1.z);
  r1.z = r1.z * r2.x;
  r2.x = 1 + -r0.w;
  r2.y = r2.x * r2.x;
  r2.y = r2.y * r2.y;
  r2.x = r2.y * r2.x;
  r0.x = 1 + -r0.x;
  r2.y = r0.x * r0.x;
  r2.y = r2.y * r2.y;
  r0.x = r2.y * r0.x;
  r2.y = r0.y * r0.y;
  r2.y = dot(r2.yy, r7.xx);
  r2.y = -0.5 + r2.y;
  r2.x = r2.y * r2.x + 1;
  r0.x = r2.y * r0.x + 1;
  r0.x = r2.x * r0.x;
  r0.z = r1.z * r0.z;
  r0.z = 0.785398185 * r0.z;
  r1.z = cmp(cb0[4].w == 0.000000);
  r2.x = max(9.99999975e-005, r0.z);
  r2.x = sqrt(r2.x);
  r0.z = r1.z ? r2.x : r0.z;
  r0.xz = r0.xz * r0.ww;
  r0.z = max(0, r0.z);
  r0.w = dot(r5.xyz, r5.xyz);
  r0.w = cmp(r0.w != 0.000000);
  r0.w = r0.w ? 1.000000 : 0;
  r0.z = r0.z * r0.w;
  r2.xyz = r1.xyw * r0.xxx;
  r0.xzw = r0.zzz * r1.xyw;
  r0.y = 1 + -r0.y;
  r1.x = r0.y * r0.y;
  r1.x = r1.x * r1.x;
  r0.y = r1.x * r0.y;
  r1.xyz = r7.yzw * r0.yyy + r5.xyz;
  r0.xyz = r1.xyz * r0.xzw;
  o0.xyz = r4.xyz * r2.xyz + r0.xyz;
  o0.w = 1;
  return;
}
