// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e5d2fa35759aa4b7-ps.txt
// 3DMigoto: e5d2fa35759aa4b7 |    Unity headers extracted from Reflect-Bumped.shader
//    Shader "Legacy Shaders/Reflective/Bumped Diffuse" {
//      Properties {
//       _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _ReflectColor ("Reflection Color", Color) = (1.000000,1.000000,1.000000,0.500000)
//       _MainTex ("Base (RGB) RefStrength (A)", 2D) = "white" { }
//       _Cube ("Reflection Cubemap", CUBE) = "_Skybox" { }
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//      }
//      Fallback "Legacy Shaders/Reflective/VertexLit"
//      SubShader 1/1 {
//        LOD 300
//        Tags { "RenderType"="Opaque" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "SHADOWSUPPORT"="true" "RenderType"="Opaque" }
//          GpuProgramID 63950
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 119
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Reflect-Bumped.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201510240 61 7 0
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" }
//   undeciphered2: 1 5 3 4 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 192
//   Vector 64 [unity_Lightmap_HDR]
//   Vector 128 [_Color]
//   Vector 144 [_ReflectColor]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [_BumpMap] 2D 2
//   SetTexture 2 [_Cube] CUBE 3
//   SetTexture 3 [unity_Lightmap] 2D 0
//   SetTexture 4 [unity_LightmapInd] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityFog" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 07:01:51 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xy  
// TEXCOORD                 6   x           6     NONE   float   x   
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.x
dcl_output o0.xyzw
dcl_temps 13
dcl_constantbuffer cb10[4], immediateIndexed
dcl_constantbuffer cb11[22], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r8.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed e5d2fa35759aa4b7-ps.txt
mov r9.xyzw, cb1[4].xyzw
mov r10.xyzw, l(0)
mul r10.x, -r8.x, r8.y
mul r12.xyzw, cb10[0].xyzw, r10.xxxx
mad r12.xyzw, cb10[1].xyzw, r10.yyyy, r12.xyzw
mad r12.xyzw, cb10[2].xyzw, r10.zzzz, r12.xyzw
mad r12.xyzw, cb10[3].xyzw, r10.wwww, r12.xyzw
mul r11.xyzw, cb11[12].xyzw, r12.xxxx
mad r11.xyzw, cb11[13].xyzw, r12.yyyy, r11.xyzw
mad r11.xyzw, cb11[14].xyzw, r12.zzzz, r11.xyzw
mad r11.xyzw, cb11[15].xyzw, r12.wwww, r11.xyzw
add r9.xyz, r9.xyz, -r11.xyz

sample r0.xyzw, v5.xyxx, t3.xyzw, s0
log r0.w, r0.w
mul r0.w, r0.w, cb0[4].y
exp r0.w, r0.w
mul r0.w, r0.w, cb0[4].x
mul r0.xyz, r0.xyzx, r0.wwww
sample r1.xyzw, v5.xyxx, t4.xyzw, s0
mad r1.xyz, r1.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.w, r1.xyzx, r1.xyzx
sqrt r0.w, r0.w
max r0.w, r0.w, l(0.001000)
add r1.w, -r0.w, l(1.000000)
mul r2.xyz, r0.xyzx, r1.wwww
mul r0.xyz, r0.wwww, r0.xyzx
div r1.xyz, r1.xyzx, r0.wwww
add r3.xy, v5.xyxx, l(0.500000, 0.000000, 0.000000, 0.000000)
sample r4.xyzw, r3.xyxx, t3.xyzw, s0
sample r3.xyzw, r3.xyxx, t4.xyzw, s0
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
log r0.w, r4.w
mul r0.w, r0.w, cb0[4].y
exp r0.w, r0.w
mul r0.w, r0.w, cb0[4].x
mul r4.xyz, r4.xyzx, r0.wwww
dp3 r0.w, r3.xyzx, r3.xyzx
sqrt r0.w, r0.w
max r0.w, r0.w, l(0.001000)
add r1.w, -r0.w, l(1.000000)
mul r5.xyz, r1.wwww, r4.xyzx
mul r4.xyz, r0.wwww, r4.xyzx
div r3.xyz, r3.xyzx, r0.wwww
sample r6.xyzw, v1.zwzz, t1.xyzw, s2
mad r6.xy, r6.wyww, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
dp2 r0.w, r6.xyxx, r6.xyxx
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
sqrt r6.z, r0.w
dp3 r7.x, v2.xyzx, r6.xyzx
dp3 r7.y, v3.xyzx, r6.xyzx
dp3 r7.z, v4.xyzx, r6.xyzx
dp3 r0.w, r7.xyzx, r3.xyzx
max r0.w, r0.w, l(0.000000)
mul r3.xyz, r0.wwww, r5.xyzx
dp3 r1.x, r7.xyzx, r1.xyzx
max r1.x, r1.x, l(0.000000)
mad r1.yzw, r2.xxyz, r1.xxxx, r3.xxyz
sample r2.xyzw, v1.xyxx, t0.xyzw, s1
mul r2.xyz, r2.xyzx, cb0[8].xyzx
mul r0.xyz, r0.xyzx, r2.xyzx
mul r3.xyz, r4.xyzx, r2.xyzx
mul r3.xyz, r0.wwww, r3.xyzx
mad r0.xyz, r0.xyzx, r1.xxxx, r3.xyzx
mad r0.xyz, r2.xyzx, r1.yzwy, r0.xyzx
mov r1.x, v2.w
mov r1.y, v3.w
mov r1.z, v4.w
add r1.xyz, -r1.xyzx, r9.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, -r1.xyzx, r7.xyzx
add r0.w, r0.w, r0.w
mad r1.xyz, r7.xyzx, -r0.wwww, -r1.xyzx
sample r1.xyzw, r1.xyzx, t2.xyzw, s3
mul r1.xyz, r2.wwww, r1.xyzx
mad r0.xyz, r1.xyzx, cb0[9].xyzx, r0.xyzx
add r0.xyz, r0.xyzx, -cb2[0].xyzx
mul r0.w, v6.x, cb2[1].y
exp r0.w, -r0.w
min r0.w, r0.w, l(1.000000)
mad o0.xyz, r0.wwww, r0.xyzx, cb2[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used