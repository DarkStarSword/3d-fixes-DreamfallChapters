// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 11ddbfbf02d3141a-ps.txt
// 3DMigoto: 11ddbfbf02d3141a | Matched 2 variants of 2 shaders: Hidden/FogVolume_Rotation, Hidden/FogVolume_Rotation_SHADE
//
// 1:    Unity headers extracted from FogVolume_Rotation.shader
// 2:    Unity headers extracted from FogVolume_Rotation_SHADE.shader
// 1:    Shader "Hidden/FogVolume_Rotation" {
// 2:    Shader "Hidden/FogVolume_Rotation_SHADE" {
//         SubShader 1/1 {
//           Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="FogVolume" }
//           Pass 1/1 {
//             Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="FogVolume" }
//             ZTest Always
//             ZWrite Off
//             Cull Front
//             Blend SrcAlpha OneMinusSrcAlpha
// 2:          GpuProgramID 57605
// 1:          GpuProgramID 59518
//             Program "fp" {
//               SubProgram "d3d11 " {
// 2:              GpuProgramIndex 115
// 1:              GpuProgramIndex 231
//               }
//             }
//           }
//         }
//       }
//
// 1: Unity 5.3 headers extracted from FogVolume_Rotation.shader.decompressed:
// 2: Unity 5.3 headers extracted from FogVolume_Rotation_SHADE.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 134 1 3
// 2:   Keywords { "_DOUBLE_LAYER" "_FOG_VOLUME_NOISE" "_FOG_VOLUME_INSCATTERING" }
// 1:   Keywords { "_DOUBLE_LAYER" "_SHADE" "_FOG_VOLUME_NOISE" "_FOG_VOLUME_INSCATTERING" }
//      undeciphered2: 1 2 3 2 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 336
//      Vector 96 [_Color]
//      Vector 112 [_InscatteringColor]
//      Vector 128 [_BoxMin]
//      Vector 144 [_BoxMax]
//      Vector 160 [Speed]
//      Vector 176 [Stretch]
//      Vector 208 [_ShadowColor]
//      Vector 240 [L] 3
//      Float 252 [_InscatteringIntensity]
//      Float 256 [InscatteringShape]
//      Float 260 [_Visibility]
//      Float 264 [InscatteringStartDistance]
//      Float 272 [InscatteringTransitionWideness]
//      Float 276 [_3DNoiseScale]
//      Float 280 [_RayStep]
//      Float 284 [gain]
//      Float 288 [threshold]
//      Float 292 [SwirlAdjust]
//      Float 296 [Shade]
//      Float 304 [ShadowBrightness]
//      Float 312 [Exposure]
//      Float 316 [FadeDistance]
//      Float 320 [ShadowShift]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 0 [_Time]
//      Vector 64 [_WorldSpaceCameraPos] 3
//      Vector 112 [_ZBufferParams]
//      ConstBuffer "UnityPerDraw" 352
//      Matrix 192 [unity_ObjectToWorld]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_NoiseVolume] 3D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerDraw" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.61 on Thu Aug 17 00:58:37 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyz         5     NONE   float   xyz 
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[21], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture3d (float,float,float,float) t1
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 19
dcl_constantbuffer cb10[4], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r15.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed 11ddbfbf02d3141a-ps.txt
mov r16.xyzw, cb1[4].xyzw
mul r17.x, -r15.x, r15.y
mul r18.xyzw, cb10[0].xyzw, r17.xxxx
add r16.xyz, r16.xyz, -r18.xyz

add r0.xyz, v3.xyzx, -v5.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
lt r1.xyz, l(0.000000, 0.000000, 0.000000, 0.000000), r0.xyzx
add r2.xyz, -v5.xyzx, cb0[8].xyzx
div r2.xyz, r2.xyzx, r0.xyzx
add r3.xyz, -v5.xyzx, cb0[9].xyzx
div r3.xyz, r3.xzyx, r0.xzyx
mov r2.w, r3.x
movc r1.xw, r1.xxxx, r2.xxxw, r2.wwwx
mov r3.xw, r2.zzzy
movc r2.xy, r1.yyyy, r3.wzww, r3.zwzz
lt r0.w, r1.x, r2.x
movc r0.w, r0.w, r2.x, r1.x
lt r1.x, r2.y, r1.w
movc r1.x, r1.x, r2.y, r1.w
movc r1.yz, r1.zzzz, r3.xxyx, r3.yyxy
lt r1.w, r0.w, r1.y
movc r0.w, r1.w, r1.y, r0.w
lt r1.y, r1.z, r1.x
movc r1.x, r1.y, r1.z, r1.x
add r1.yzw, |v5.xxyz|, -cb0[9].xxyz
ge r1.yzw, r1.yyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
and r1.yzw, r1.yyzw, l(0, 0x3f800000, 0x3f800000, 0x3f800000)
add r1.y, r1.z, r1.y
add r1.y, r1.w, r1.y
min r1.y, r1.y, l(1.000000)
mul r0.w, r0.w, r1.y
div r1.yz, v2.xxyx, v2.wwww
sample r2.xyzw, r1.yzyy, t0.xyzw, s0
mad r1.y, cb1[7].z, r2.x, cb1[7].w
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
dp3 r1.z, v4.xyzx, v4.xyzx
rsq r1.z, r1.z
mul r1.z, r1.z, v4.z
div r1.y, r1.y, r1.z
max r1.z, r1.x, r0.w
min r1.w, r1.x, r0.w
min r1.zw, |r1.yyyy|, r1.zzzw
add r1.z, -r1.w, r1.z
div r1.z, r1.z, cb0[16].y
exp r1.z, -r1.z
add r1.z, -r1.z, l(1.000000)
max r1.z, r1.z, l(0.000000)
add r2.xyz, v1.xyzx, -r16.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
div r1.y, |r1.y|, cb0[17].x
add_sat r1.y, r1.y, -cb0[16].z
mad r3.xyz, r0.xyzx, r0.wwww, v5.xyzx
mad r0.xyz, r0.xyzx, r1.xxxx, v5.xyzx
add r0.xyz, -r3.xyzx, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
mul r0.xyz, r0.xyzx, r1.xxxx
sqrt r0.w, r0.w
mul r4.xyzw, cb0[10].xyzw, cb1[0].xxxx
mul r5.xyz, cb0[11].xyzx, cb0[17].yyyy
mul r6.xyz, r4.yzwy, l(0.800000, 0.800000, 0.800000, 0.000000)
add r7.xyz, -cb0[13].xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
add r1.x, -cb0[18].z, l(1.000000)
add r1.w, -r1.x, l(1.000000)
mov r8.xyz, r3.xyzx
mov r2.w, r0.w
mov r9.xyzw, l(0,0,0,0)
mov r3.w, l(0)
loop 
  ilt r5.w, r3.w, l(50)
  lt r6.w, l(0.000000), r2.w
  and r5.w, r5.w, r6.w
  breakc_z r5.w
  dp3 r10.x, r8.xyzx, cb2[12].xyzx
  dp3 r10.y, r8.xyzx, cb2[13].xyzx
  dp3 r10.z, r8.xyzx, cb2[14].xyzx
  dp3 r5.w, r10.xyzx, r10.xyzx
  sqrt r5.w, r5.w
  div r5.w, r5.w, cb0[19].w
  mul r5.w, r5.w, l(-1.442695)
  exp r5.w, r5.w
  min r5.w, r5.w, l(1.000000)
  mul r5.w, r5.w, cb0[17].w
  mul r6.w, r5.w, cb0[18].y
  mad r7.w, cb0[10].x, cb1[0].x, r6.w
  sincos r10.x, r11.x, r7.w
  mov r11.yz, r10.xxxx
  mad r10.xyz, r11.xyzx, l(0.500000, -0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r10.xyz, r10.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r6.w, r4.x, l(1.200000), r6.w
  sincos r11.x, r12.x, r6.w
  mov r12.yz, r11.xxxx
  mad r11.xyz, r12.xyzx, l(0.500000, -0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
  mad r11.xyz, r11.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r12.xyz, r8.xyzx, r5.xyzx, r4.yzwy
  dp2 r13.x, r12.xyxx, r10.xzxx
  dp2 r13.y, r12.yxyy, r10.xyxx
  mad r10.xyz, r8.xyzx, r5.xyzx, r6.xyzx
  dp2 r14.x, r10.xyxx, r11.xzxx
  dp2 r14.y, r10.yxyy, r11.xyxx
  mov r13.z, r12.z
  sample_l r11.xyzw, r13.xyzx, t1.xyzw, s1, l(1.000000)
  mov r14.z, r10.z
  sample_l r10.xyzw, r14.xyzx, t1.xyzw, s1, l(0.000000)
  add r6.w, -r11.x, r10.x
  mad r6.w, r6.w, l(0.500000), r11.x
  mul r7.w, r5.w, r6.w
  mad r5.w, r6.w, r5.w, -cb0[18].x
  mul_sat r10.w, r7.w, r5.w
  mov r11.xyz, r13.xzyx
  mov r5.w, l(1.000000)
  mov r6.w, l(0)
  mov r7.w, l(0)
  loop 
    ige r8.w, r7.w, l(3)
    breakc_nz r8.w
    mul r8.w, r6.w, v6.y
    mad r11.xy, r6.wwww, v6.xzxx, r11.xyxx
    mad r11.z, r8.w, l(0.001000), r11.z
    sample_l r12.xyzw, r11.xzyx, t1.xyzw, s1, l(0.000000)
    mad r5.w, -r12.x, r5.w, r5.w
    mad r6.w, cb0[20].x, l(0.333333343), r6.w
    iadd r7.w, r7.w, l(1)
  endloop 
  mul r6.w, r5.w, cb0[19].x
  mul r7.w, r6.w, r6.w
  mul r6.w, r6.w, r7.w
  mad r11.xyz, r6.wwww, r7.xyzx, cb0[13].xyzx
  mov r12.xyz, r14.xzyx
  mov r6.w, l(1.000000)
  mov r7.w, l(0)
  mov r8.w, l(0)
  loop 
    ige r11.w, r8.w, l(3)
    breakc_nz r11.w
    mul r11.w, r7.w, v6.y
    mad r12.xy, r7.wwww, v6.xzxx, r12.xyxx
    mad r12.z, r11.w, l(0.001000), r12.z
    sample_l r13.xyzw, r12.xzyx, t1.xyzw, s1, l(0.000000)
    mad r6.w, -r13.x, r6.w, r6.w
    mad r7.w, cb0[20].x, l(0.333333343), r7.w
    iadd r8.w, r8.w, l(1)
  endloop 
  mul r7.w, r6.w, cb0[19].x
  mul r8.w, r7.w, r7.w
  mul r7.w, r7.w, r8.w
  mad r12.xyz, r7.wwww, r7.xyzx, cb0[13].xyzx
  add r12.xyz, -r11.xyzx, r12.xyzx
  mad r11.xyz, r12.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), r11.xyzx
  mad r11.xyz, r11.xyzx, r1.wwww, r1.xxxx
  mul r10.xyz, r10.wwww, r11.xyzx
  add r7.w, -r9.w, l(1.000000)
  mad_sat r9.xyzw, r10.xyzw, r7.wwww, r9.xyzw
  iadd r3.w, r3.w, l(1)
  mad r8.xyz, r0.xyzx, cb0[17].zzzz, r8.xyzx
  add r2.w, r2.w, -cb0[17].z
endloop 
mul r0.xyz, r9.xyzx, cb0[6].xyzx
mul r3.xyz, r0.xyzx, r0.xyzx
dp3_sat r0.w, r2.xyzx, cb0[15].xyzx
mad r1.x, -cb0[16].x, cb0[16].x, l(1.000000)
dp2 r0.w, r0.wwww, cb0[16].xxxx
mad r0.w, cb0[16].x, cb0[16].x, -r0.w
add r0.w, r0.w, l(1.000000)
log r0.w, r0.w
mul r0.w, r0.w, l(1.500000)
exp r0.w, r0.w
div r0.w, r1.x, r0.w
mul r0.w, r0.w, l(0.0795772821)
mul r1.x, r1.z, r1.y
mul r0.w, r0.w, r1.x
mul r1.xyz, r3.xyzx, cb0[7].xyzx
mul r1.xyz, r1.xyzx, cb0[15].wwww
mad r0.xyz, r1.xyzx, r0.wwww, r0.xyzx
mul r9.xyz, r0.xyzx, cb0[19].zzzz
mov_sat o0.xyzw, r9.xyzw
ret 
// Approximately 0 instruction slots used