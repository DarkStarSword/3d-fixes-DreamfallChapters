// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 4ea1e062d18928ac-ps_replace.txt
// 3DMigoto: 4ea1e062d18928ac | Matched 2 variants of 1 shaders: Hidden/Internal-PrePassCollectShadows
//
//       Unity headers extracted from Internal-PrePassCollectShadows.shader
//       Shader "Hidden/Internal-PrePassCollectShadows" {
//         Properties {
//          _ShadowMapTexture ("", any) = "" { }
//         }
//         Fallback Off
//         SubShader 1/2 {
//           Pass 1/1 {
//             ZTest Always
//             ZWrite Off
//             Cull Off
//             GpuProgramID 10505
//             Program "fp" {
//               SubProgram "d3d11 " {
//                 GpuProgramIndex 11
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from Internal-PrePassCollectShadows.shader.decompressed:
//      API d3d11
//      Shader model ps_4_0
//      undeciphered1: 201510240 76 1 2
//      Keywords { "SHADOWS_SPLIT_SPHERES" }
//      undeciphered2: 1 2 4 2 0 0
//      undeciphered3: 0 0
//      ConstBuffer "$Globals" 128
//      Vector 112 [_ShadowMapTexture_TexelSize]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 112 [_ZBufferParams]
//      Vector 128 [unity_OrthoParams]
//      ConstBuffer "UnityPerCameraRare" 352
//      Matrix 288 [unity_CameraToWorld]
//      ConstBuffer "UnityShadows" 416
//      Vector 0 [unity_ShadowSplitSpheres0]
//      Vector 16 [unity_ShadowSplitSpheres1]
//      Vector 32 [unity_ShadowSplitSpheres2]
//      Vector 48 [unity_ShadowSplitSpheres3]
//      Vector 64 [unity_ShadowSplitSqRadii]
//      Vector 80 [unity_LightShadowBias]
//      Vector 384 [_LightShadowData]
//      Vector 400 [unity_ShadowFadeCenterAndType]
//      Matrix 128 [unity_WorldToShadow0]
//      Matrix 192 [unity_WorldToShadow1]
//      Matrix 256 [unity_WorldToShadow2]
//      Matrix 320 [unity_WorldToShadow3]
//      SetTexture 0 [_CameraDepthTexture] 2D 0
//      SetTexture 1 [_ShadowMapTexture] 2D 1
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityPerCameraRare" 2
//      BindCB "UnityShadows" 3
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

// ---- Created with 3Dmigoto v1.2.52 on Tue Jan 31 06:22:09 2017
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[26];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[22];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[9];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[8];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);



cbuffer UnityPerDraw : register(b11) {
	float4x4 glstate_matrix_mvp;
	float4x4 glstate_matrix_modelview0;
	float4x4 glstate_matrix_invtrans_modelview0;
	#define UNITY_MATRIX_MVP glstate_matrix_mvp
	#define UNITY_MATRIX_MV glstate_matrix_modelview0
	#define UNITY_MATRIX_IT_MV glstate_matrix_invtrans_modelview0

	uniform float4x4 _Object2World;
	uniform float4x4 _World2Object;
	uniform float4 unity_LODFade; // x is the fade value ranging within [0,1]. y is x quantized into 16 levels
	uniform float4 unity_WorldTransformParams; // w is usually 1.0, or -1.0 for odd-negative scale transforms
}


#include <matrix.hlsl>

void main( 
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : SV_POSITION0,
  out float4 o0 : SV_Target0,
  float fov : TEXCOORD3)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

float4 stereo = StereoParams.Load(0);
float separation = stereo.x, convergence = stereo.y, eye = stereo.z;

  r0.xyzw = t0.Sample(s0_s, v0.xy).xyzw;
  r0.y = cb1[7].x * r0.x + cb1[7].y;
  r0.y = 1 / r0.y;
  r0.z = r0.x + -r0.y;
  r0.y = cb1[8].w * r0.z + r0.y;
  r1.xyz = v1.xyz * r0.yyy;
  r0.z = v2.w + -v2.z;
  r2.z = r0.x * r0.z + v2.z;
  r2.xy = v2.xy;
  r0.xyz = -v1.xyz * r0.yyy + r2.xyz;
  r0.xyz = cb1[8].www * r0.xyz + r1.xyz;
float depth = r0.z;

// Unity light/shadow fix (pixel shader stage) inserted with DarkStarSword's hlsltool.py:
// hlsltool.py -I ../.. --fix-unity-lighting-ps --only-autofixed --fxc /home/dss/fxc.exe 4ea1e062d18928ac-ps_replace.txt
if (fov) {
  r0.x -= separation * (depth - convergence) * fov;
}

  r1.xyzw = cb2[19].xyzw * r0.yyyy;
  r1.xyzw = cb2[18].xyzw * r0.xxxx + r1.xyzw;
  r0.xyzw = cb2[20].xyzw * r0.zzzz + r1.xyzw; // depth in r0.z
  r0.xyzw = cb2[21].xyzw + r0.xyzw;

// Fallback adjustment if the FOV was not passed from the VS:
if (!fov) {
  float4 clip_space_adj = float4(separation * (depth - convergence), 0, 0, 0);
  float4 local_space_adj = mul(inverse(glstate_matrix_mvp), clip_space_adj);
  float4 world_space_adj = mul(_Object2World, local_space_adj);
  r0.xyz -= world_space_adj.xyz;
}

  r1.xyz = -cb3[0].xyz + r0.xyz;
  r2.xyz = -cb3[1].xyz + r0.xyz;
  r3.xyz = -cb3[2].xyz + r0.xyz;
  r4.xyz = -cb3[3].xyz + r0.xyz;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.y = dot(r2.xyz, r2.xyz);
  r1.z = dot(r3.xyz, r3.xyz);
  r1.w = dot(r4.xyz, r4.xyz);
  r1.xyzw = cmp(r1.xyzw < cb3[4].xyzw);
  r2.xyzw = r1.xyzw ? float4(1,1,1,1) : 0;
  r1.xyz = r1.xyz ? float3(-1,-1,-1) : float3(-0,-0,-0);
  r1.xyz = r2.yzw + r1.xyz;
  r1.xyz = max(float3(0,0,0), r1.xyz);
  r2.yzw = cb3[9].xyz * r0.yyy;
  r2.yzw = cb3[8].xyz * r0.xxx + r2.yzw;
  r2.yzw = cb3[10].xyz * r0.zzz + r2.yzw;
  r2.yzw = cb3[11].xyz * r0.www + r2.yzw;
  r3.xyz = cb3[13].xyz * r0.yyy;
  r3.xyz = cb3[12].xyz * r0.xxx + r3.xyz;
  r3.xyz = cb3[14].xyz * r0.zzz + r3.xyz;
  r3.xyz = cb3[15].xyz * r0.www + r3.xyz;
  r4.xyz = cb3[17].xyz * r0.yyy;
  r4.xyz = cb3[16].xyz * r0.xxx + r4.xyz;
  r4.xyz = cb3[18].xyz * r0.zzz + r4.xyz;
  r4.xyz = cb3[19].xyz * r0.www + r4.xyz;
  r5.xyz = cb3[21].xyz * r0.yyy;
  r5.xyz = cb3[20].xyz * r0.xxx + r5.xyz;
  r5.xyz = cb3[22].xyz * r0.zzz + r5.xyz;
  r5.xyz = cb3[23].xyz * r0.www + r5.xyz;
  r3.xyz = r3.xyz * r1.xxx;
  r2.xyz = r2.yzw * r2.xxx + r3.xyz;
  r1.xyw = r4.xyz * r1.yyy + r2.xyz;
  r1.xyz = r5.xyz * r1.zzz + r1.xyw;
  r2.xy = float2(0.5,0.5) * cb0[7].xy;
  r1.xy = -cb0[7].xy * float2(3.5,3.5) + r1.xy;
  r1.xy = cb0[7].zw * r1.xy;
  r2.zw = frac(r1.xy);
  r3.xy = float2(1,1) + -r2.zw;
  r1.xy = floor(r1.xy);
  r1.xy = r1.xy * cb0[7].xy + r2.xy;
  r0.w = 0;
  r1.w = 0;
  while (true) {
    r2.x = cmp((int)r1.w >= 8);
    if (r2.x != 0) break;
    r2.x = cmp((int)r1.w == 7);
    r2.x = r2.x ? r2.w : 1;
    r2.x = r1.w ? r2.x : r3.y;
    r4.y = (int)r1.w;
    r2.y = r0.w;
    r3.z = 0;
    while (true) {
      r3.w = cmp((int)r3.z >= 8);
      if (r3.w != 0) break;
      r4.x = (int)r3.z;
      r4.zw = float2(-4,-4) + r4.xy;
      r3.w = dot(r4.zw, r4.zw);
      r3.w = sqrt(r3.w);
      r4.xz = r4.xy * cb0[7].xy + r1.xy;
      r3.w = -r3.w * cb3[5].x + r1.z;
      r3.w = t1.SampleCmpLevelZero(s1_s, r4.xz, r3.w).x;
      r3.w = cmp(r3.w >= 0.5);
      r3.w = r3.w ? 1.000000 : 0;
      r4.x = cmp((int)r3.z == 7);
      r4.x = r4.x ? r2.z : 1;
      r4.x = r3.z ? r4.x : r3.x;
      r3.w = r4.x * r3.w;
      r2.y = r3.w * r2.x + r2.y;
      r3.z = (int)r3.z + 1;
    }
    r0.w = r2.y;
    r1.w = (int)r1.w + 1;
  }
  r0.w = 0.0204081628 * r0.w;
  r1.x = 1 + -cb3[24].x;
  r0.w = r0.w * r1.x + cb3[24].x;
  r0.w = r0.w * r1.x + cb3[24].x;
  r0.xyz = -cb3[25].xyz + r0.xyz;
  r0.x = dot(r0.xyz, r0.xyz);
  r0.x = sqrt(r0.x);
  r0.x = saturate(r0.x * cb3[24].z + cb3[24].w);
  o0.xyzw = r0.wwww + r0.xxxx;
  return;
}
