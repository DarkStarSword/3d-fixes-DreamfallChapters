// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 37a5ef18bea43ba2-vs.txt
// 3DMigoto: 37a5ef18bea43ba2 | Matched 12 variants of 1 shaders: Nature/SpeedTree Billboard
//
//         Unity headers extracted from SpeedTreeBillboard.shader
//         Shader "Nature/SpeedTree Billboard" {
//           Properties {
//            _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//            _SpecColor ("Specular Color", Color) = (0.500000,0.500000,0.500000,0.000000)
//            _HueVariation ("Hue Variation", Color) = (1.000000,0.500000,0.000000,0.100000)
//            _MainTex ("Base (RGB)", 2D) = "white" { }
//            _BumpMap ("Normalmap", 2D) = "bump" { }
//            _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//           [MaterialEnum(None,0,Fastest,1)]  _WindQuality ("Wind Quality", Range(0.000000,1.000000)) = 0.000000
//           }
//           Fallback "Transparent/Cutout/VertexLit"
//           SubShader 1/2 {
//             LOD 400
//             Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//             Pass 2/7 {
//               Name "FORWARD"
//               Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//               ZWrite Off
//               Cull Off
//               Blend One One
//               GpuProgramID 85699
//               Program "vp" {
//                 SubProgram "d3d11 " {
// 001:              GpuProgramIndex 1219
// 002:              GpuProgramIndex 1223
// 004:              GpuProgramIndex 1225
// 008:              GpuProgramIndex 1227
// 010:              GpuProgramIndex 1229
// 020:              GpuProgramIndex 1233
// 040:              GpuProgramIndex 1235
// 080:              GpuProgramIndex 1237
// 100:              GpuProgramIndex 1239
// 200:              GpuProgramIndex 1243
// 400:              GpuProgramIndex 1245
// 800:              GpuProgramIndex 1247
//                 }
//               }
//             }
//           }
//         }
//
//      Unity 5.3 headers extracted from SpeedTreeBillboard.shader.decompressed:
//        API d3d11
//        Shader model vs_4_0
//        undeciphered1: 201510240 93 0 0
// 080:   Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 800:   Keywords { "DIRECTIONAL_COOKIE" "FOG_EXP2" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 008:   Keywords { "DIRECTIONAL_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 010:   Keywords { "POINT" "FOG_EXP" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 100:   Keywords { "POINT" "FOG_EXP2" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 001:   Keywords { "POINT" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 040:   Keywords { "POINT_COOKIE" "FOG_EXP" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 400:   Keywords { "POINT_COOKIE" "FOG_EXP2" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 004:   Keywords { "POINT_COOKIE" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 020:   Keywords { "SPOT" "FOG_EXP" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 200:   Keywords { "SPOT" "FOG_EXP2" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
// 002:   Keywords { "SPOT" "FOG_LINEAR" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
//        undeciphered2: 1 0 6 0 0 0
//        undeciphered3: 25 3 0 0 3 4 4 5
//        ConstBuffer "$Globals" 240
//        Float 196 [_WindQuality]
//        Float 200 [_WindEnabled]
//        Vector 208 [_HueVariation]
//        Vector 224 [_Color]
//        ConstBuffer "UnityPerCamera" 144
//        Vector 80 [_ProjectionParams]
//        Vector 96 [_ScreenParams]
//        ConstBuffer "UnityPerDraw" 352
//        Vector 336 [unity_WorldTransformParams]
//        Matrix 0 [glstate_matrix_mvp]
//        Matrix 192 [unity_ObjectToWorld]
//        Matrix 256 [unity_WorldToObject]
//        ConstBuffer "SpeedTreeWind" 256
//        Vector 0 [_ST_WindVector]
//        Vector 16 [_ST_WindGlobal]
//        Vector 96 [_ST_WindBranchAdherences]
//        ConstBuffer "UnityBillboardPerCamera" 48
//        Vector 0 [unity_BillboardNormal] 3
//        Vector 16 [unity_BillboardTangent] 3
//        Vector 32 [unity_BillboardCameraParams]
//        ConstBuffer "UnityBillboardPerBatch" 288
//        Vector 0 [unity_BillboardInfo]
//        Vector 16 [unity_BillboardSize]
//        Vector 32 [unity_BillboardImageTexCoords0]
//        Vector 48 [unity_BillboardImageTexCoords1]
//        Vector 64 [unity_BillboardImageTexCoords2]
//        Vector 80 [unity_BillboardImageTexCoords3]
//        Vector 96 [unity_BillboardImageTexCoords4]
//        Vector 112 [unity_BillboardImageTexCoords5]
//        Vector 128 [unity_BillboardImageTexCoords6]
//        Vector 144 [unity_BillboardImageTexCoords7]
//        Vector 160 [unity_BillboardImageTexCoords8]
//        Vector 176 [unity_BillboardImageTexCoords9]
//        Vector 192 [unity_BillboardImageTexCoords10]
//        Vector 208 [unity_BillboardImageTexCoords11]
//        Vector 224 [unity_BillboardImageTexCoords12]
//        Vector 240 [unity_BillboardImageTexCoords13]
//        Vector 256 [unity_BillboardImageTexCoords14]
//        Vector 272 [unity_BillboardImageTexCoords15]
//        BindCB "$Globals" 0
//        BindCB "UnityPerCamera" 1
//        BindCB "UnityPerDraw" 2
//        BindCB "SpeedTreeWind" 3
//        BindCB "UnityBillboardPerCamera" 4
//        BindCB "UnityBillboardPerBatch" 5
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 06:15:48 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float       
// TANGENT                  0   xyzw        4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 8      w        1     NONE   float      w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
// TEXCOORD                 6   xyz         7     NONE   float   xyz 
//
vs_4_0
dcl_constantbuffer cb0[15], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[22], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_constantbuffer cb4[3], immediateIndexed
dcl_constantbuffer cb5[18], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyz
dcl_temps 6

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.xyz, v0.xyzx, cb2[15].xyzx
add r1.x, r0.x, v2.w
mad r1.y, v2.w, l(0.800000), r0.y
add r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r1.xy, r1.xyxx
mad r1.xy, r1.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r1.zw, |r1.xxxy|, |r1.xxxy|
mad r1.xy, -|r1.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r1.xy, r1.zwzz, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r1.xy, r1.xyxx, r1.xyxx
mad r0.w, r1.y, r1.y, r1.x
div r1.x, cb3[6].x, cb3[1].z
mad r0.w, cb3[1].y, r0.w, r1.x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb3[1].z
mad r1.y, v1.y, cb5[1].y, cb5[1].z
add r1.z, v1.x, l(-0.500000)
mul r1.z, r1.z, cb5[1].x
mul r1.z, r1.z, v2.x
mul r2.xyz, r1.zzzz, cb4[1].xyzx
mad r2.w, r1.y, v2.y, r2.y
mad r1.x, -r1.x, l(0.250000), r2.w
max r1.x, r1.x, l(0.000000)
mul r1.x, r1.x, cb3[1].z
log r1.y, r1.x
mul r1.y, r1.y, cb3[1].w
exp r1.y, r1.y
ne r1.z, r1.x, l(0.000000)
movc r1.x, r1.z, r1.y, r1.x
mul r0.w, r0.w, r1.x
mad r1.xz, cb3[0].xxzx, r0.wwww, r2.xxzx
mov r1.y, r2.w
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r2.xzwx, r2.xzwx
sqrt r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mul r0.w, cb0[12].z, cb0[12].y
lt r0.w, l(0.000000), r0.w
movc r1.xyz, r0.wwww, r1.xyzx, r2.xwzx
add r1.xyz, r1.xyzx, v0.xyzx
mul r2.xyzw, r1.yyyy, cb2[1].xyzw
mad r2.xyzw, cb2[0].xyzw, r1.xxxx, r2.xyzw
mad r2.xyzw, cb2[2].xyzw, r1.zzzz, r2.xyzw
add r2.xyzw, r2.xyzw, cb2[3].xyzw
mov o0.xyzw, r2.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 37a5ef18bea43ba2-vs.txt
ne r5.w, r2.w, l(1.0)
if_nz r5.w
  add r5.w, r2.w, -r5.y
  mad r2.x, r5.w, r5.x, r2.x
endif

mov o1.w, r2.z
mul r2.y, cb2[16].x, cb4[0].x
mul r2.z, cb2[17].x, cb4[0].x
mul r2.x, cb2[18].x, cb4[0].x
mul r3.y, cb2[16].y, cb4[0].y
mul r3.z, cb2[17].y, cb4[0].y
mul r3.x, cb2[18].y, cb4[0].y
add r2.xyz, r2.xyzx, r3.xyzx
mul r3.y, cb2[16].z, cb4[0].z
mul r3.z, cb2[17].z, cb4[0].z
mul r3.x, cb2[18].z, cb4[0].z
add r2.xyz, r2.xyzx, r3.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mov o1.z, r2.y
mul r3.xyz, cb2[13].yzxy, cb4[1].yyyy
mad r3.xyz, cb2[12].yzxy, cb4[1].xxxx, r3.xyzx
mad r3.xyz, cb2[14].yzxy, cb4[1].zzzz, r3.xyzx
dp3 r0.w, r3.xyzx, r3.xyzx
rsq r0.w, r0.w
mul r3.xyz, r0.wwww, r3.xyzx
mul r4.xyz, r2.xyzx, r3.xyzx
mad r4.xyz, r2.zxyz, r3.yzxy, -r4.xyzx
mul r4.xyz, r4.xyzx, -cb2[21].wwww
mov o1.y, r4.x
mov o1.x, r3.z
mov o2.z, r2.z
mov o3.z, r2.x
mov o2.x, r3.x
mov o3.x, r3.y
mov o2.y, r4.y
mov o3.y, r4.z
mul r2.xyz, r1.yyyy, cb2[13].xyzx
mad r2.xyz, cb2[12].xyzx, r1.xxxx, r2.xyzx
mad r2.xyz, cb2[14].xyzx, r1.zzzz, r2.xyzx
add o4.xyz, r2.xyzx, cb2[15].xyzx
mov o5.xyzw, cb0[14].xyzw
add r0.x, r0.y, r0.x
add r0.x, r0.z, r0.x
frc r0.x, r0.x
mul_sat o6.z, r0.x, cb0[13].w
add r0.x, v2.z, cb4[2].w
mad r0.x, r0.x, cb5[0].y, l(0.500000)
round_ni r0.x, r0.x
div r0.x, r0.x, cb5[0].x
ge r0.y, r0.x, -r0.x
frc r0.x, |r0.x|
movc r0.x, r0.y, r0.x, -r0.x
mul r0.x, r0.x, cb5[0].x
ftou r0.x, r0.x
lt r0.y, cb5[r0.x + 2].w, l(0.000000)
mad r0.zw, -cb5[r0.x + 2].zzzw, v1.yyyx, cb5[r0.x + 2].xxxy
mad r2.xy, cb5[r0.x + 2].zwzz, v1.xyxx, cb5[r0.x + 2].xyxx
movc o6.xy, r0.yyyy, r0.zwzz, r2.xyxx
mul r0.xyz, r1.yyyy, cb2[1].xywx
mad r0.xyz, cb2[0].xywx, r1.xxxx, r0.xyzx
mad r0.xyz, cb2[2].xywx, r1.zzzz, r0.xyzx
add r0.xyz, r0.xyzx, cb2[3].xywx
mul r1.xz, r0.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.x, r0.y, cb1[5].x
mov o7.z, r0.z
mul r1.w, r0.x, l(0.500000)
add r0.xy, r1.zzzz, r1.xwxx
mul r0.zw, cb1[6].xxxy, l(0.000000, 0.000000, 0.250000, 0.250000)
mul o7.xy, r0.zwzz, r0.xyxx
ret 
// Approximately 0 instruction slots used