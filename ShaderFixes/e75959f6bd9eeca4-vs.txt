// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed e75959f6bd9eeca4-vs.txt
// 3DMigoto: e75959f6bd9eeca4 | Matched 3 variants of 1 shaders: Nature/SpeedTree Billboard
//
//       Unity headers extracted from SpeedTreeBillboard.shader
//       Shader "Nature/SpeedTree Billboard" {
//         Properties {
//          _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//          _SpecColor ("Specular Color", Color) = (0.500000,0.500000,0.500000,0.000000)
//          _HueVariation ("Hue Variation", Color) = (1.000000,0.500000,0.000000,0.100000)
//          _MainTex ("Base (RGB)", 2D) = "white" { }
//          _BumpMap ("Normalmap", 2D) = "bump" { }
//          _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//         [MaterialEnum(None,0,Fastest,1)]  _WindQuality ("Wind Quality", Range(0.000000,1.000000)) = 0.000000
//         }
//         Fallback "Transparent/Cutout/VertexLit"
//         SubShader 1/2 {
//           LOD 400
//           Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//           Pass 7/7 {
//             Tags { "LIGHTMODE"="Vertex" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
//             Cull Off
//             GpuProgramID 401848
//             Program "vp" {
//               SubProgram "d3d11 " {
// 1:              GpuProgramIndex 2931
// 2:              GpuProgramIndex 2933
// 4:              GpuProgramIndex 2935
//               }
//             }
//           }
//         }
//       }
//
//    Unity 5.3 headers extracted from SpeedTreeBillboard.shader.decompressed:
//      API d3d11
//      Shader model vs_4_0
//      undeciphered1: 201510240 124 0 1
// 2:   Keywords { "FOG_EXP" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
// 4:   Keywords { "FOG_EXP2" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
// 1:   Keywords { "FOG_LINEAR" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
//      undeciphered2: 1 0 8 0 0 0
//      undeciphered3: 25 3 0 0 3 4 4 5
//      ConstBuffer "$Globals" 144
//      Float 112 [_WindQuality]
//      Float 116 [_WindEnabled]
//      Vector 128 [_Color]
//      ConstBuffer "UnityPerCamera" 144
//      Vector 80 [_ProjectionParams]
//      Vector 96 [_ScreenParams]
//      ConstBuffer "UnityLighting" 720
//      Vector 96 [unity_LightColor0]
//      Vector 112 [unity_LightColor1]
//      Vector 128 [unity_LightColor2]
//      Vector 144 [unity_LightColor3]
//      Vector 160 [unity_LightColor4]
//      Vector 176 [unity_LightColor5]
//      Vector 192 [unity_LightColor6]
//      Vector 208 [unity_LightColor7]
//      Vector 224 [unity_LightPosition0]
//      Vector 240 [unity_LightPosition1]
//      Vector 256 [unity_LightPosition2]
//      Vector 272 [unity_LightPosition3]
//      Vector 288 [unity_LightPosition4]
//      Vector 304 [unity_LightPosition5]
//      Vector 320 [unity_LightPosition6]
//      Vector 336 [unity_LightPosition7]
//      Vector 352 [unity_LightAtten0]
//      Vector 368 [unity_LightAtten1]
//      Vector 384 [unity_LightAtten2]
//      Vector 400 [unity_LightAtten3]
//      Vector 416 [unity_LightAtten4]
//      Vector 432 [unity_LightAtten5]
//      Vector 448 [unity_LightAtten6]
//      Vector 464 [unity_LightAtten7]
//      Vector 480 [unity_SpotDirection0]
//      Vector 496 [unity_SpotDirection1]
//      Vector 512 [unity_SpotDirection2]
//      Vector 528 [unity_SpotDirection3]
//      Vector 544 [unity_SpotDirection4]
//      Vector 560 [unity_SpotDirection5]
//      Vector 576 [unity_SpotDirection6]
//      Vector 592 [unity_SpotDirection7]
//      ConstBuffer "UnityPerDraw" 352
//      Matrix 0 [glstate_matrix_mvp]
//      Matrix 64 [glstate_matrix_modelview0]
//      Matrix 128 [glstate_matrix_invtrans_modelview0]
//      Matrix 192 [unity_ObjectToWorld]
//      ConstBuffer "UnityPerFrame" 352
//      Vector 0 [glstate_lightmodel_ambient]
//      ConstBuffer "SpeedTreeWind" 256
//      Vector 0 [_ST_WindVector]
//      Vector 16 [_ST_WindGlobal]
//      Vector 96 [_ST_WindBranchAdherences]
//      ConstBuffer "UnityBillboardPerCamera" 48
//      Vector 32 [unity_BillboardCameraParams]
//      ConstBuffer "UnityBillboardPerBatch" 288
//      Vector 0 [unity_BillboardInfo]
//      Vector 16 [unity_BillboardSize]
//      Vector 32 [unity_BillboardImageTexCoords0]
//      Vector 48 [unity_BillboardImageTexCoords1]
//      Vector 64 [unity_BillboardImageTexCoords2]
//      Vector 80 [unity_BillboardImageTexCoords3]
//      Vector 96 [unity_BillboardImageTexCoords4]
//      Vector 112 [unity_BillboardImageTexCoords5]
//      Vector 128 [unity_BillboardImageTexCoords6]
//      Vector 144 [unity_BillboardImageTexCoords7]
//      Vector 160 [unity_BillboardImageTexCoords8]
//      Vector 176 [unity_BillboardImageTexCoords9]
//      Vector 192 [unity_BillboardImageTexCoords10]
//      Vector 208 [unity_BillboardImageTexCoords11]
//      Vector 224 [unity_BillboardImageTexCoords12]
//      Vector 240 [unity_BillboardImageTexCoords13]
//      Vector 256 [unity_BillboardImageTexCoords14]
//      Vector 272 [unity_BillboardImageTexCoords15]
//      BindCB "$Globals" 0
//      BindCB "UnityPerCamera" 1
//      BindCB "UnityLighting" 2
//      BindCB "UnityPerDraw" 3
//      BindCB "UnityPerFrame" 4
//      BindCB "SpeedTreeWind" 5
//      BindCB "UnityBillboardPerCamera" 6
//      BindCB "UnityBillboardPerBatch" 7
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 07:02:13 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// NORMAL                   0   xyz         3     NONE   float       
// TANGENT                  0   xyzw        4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   x           1     NONE   float   x   
// TEXCOORD                 2    yzw        1     NONE   float    yzw
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz 
//
vs_4_0
dcl_constantbuffer cb0[9], immediateIndexed
dcl_constantbuffer cb1[7], immediateIndexed
dcl_constantbuffer cb2[35], dynamicIndexed
dcl_constantbuffer cb3[16], immediateIndexed
dcl_constantbuffer cb4[1], immediateIndexed
dcl_constantbuffer cb5[7], immediateIndexed
dcl_constantbuffer cb6[3], immediateIndexed
dcl_constantbuffer cb7[18], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.x
dcl_output o1.yzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_temps 7

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r6.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.xyz, v0.xyzx, cb3[15].xyzx
add r1.xyz, -r0.xyzx, cb6[2].xyzx
dp3 r0.z, r1.xyzx, r1.xyzx
rsq r0.z, r0.z
mul r1.xy, r0.zzzz, r1.xzxx
mov r1.zw, -r1.yyyy
dp2 r0.z, r1.xzxx, r1.xwxx
rsq r0.z, r0.z
mul r1.xy, r1.yxyy, l(-1.000000, 1.000000, 0.000000, 0.000000)
mul r0.zw, r0.zzzz, r1.xxxy
min r1.x, |r0.w|, |r0.z|
max r1.y, |r0.w|, |r0.z|
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.x, r1.y, r1.x
mul r1.y, r1.x, r1.x
mad r1.z, r1.y, l(0.0208350997), l(-0.085133)
mad r1.z, r1.y, r1.z, l(0.180141)
mad r1.z, r1.y, r1.z, l(-0.330299497)
mad r1.y, r1.y, r1.z, l(0.999866)
mul r1.z, r1.y, r1.x
lt r1.w, |r0.w|, |r0.z|
mad r1.z, r1.z, l(-2.000000), l(1.57079637)
and r1.z, r1.w, r1.z
mad r1.x, r1.x, r1.y, r1.z
lt r1.y, r0.w, -r0.w
and r1.y, r1.y, l(0xc0490fdb)
add r1.x, r1.y, r1.x
min r1.y, r0.w, -r0.z
max r1.z, r0.w, -r0.z
lt r1.y, r1.y, -r1.y
ge r1.z, r1.z, -r1.z
and r1.y, r1.z, r1.y
movc r1.x, r1.y, -r1.x, r1.x
lt r1.y, r1.x, l(0.000000)
and r1.y, r1.y, l(0x40c90fdb)
add r1.x, r1.y, r1.x
add r1.y, v1.x, l(-0.500000)
mul r1.y, r1.y, cb7[1].x
mul r1.y, r1.y, v2.x
mul r2.xz, r0.zzwz, r1.yyyy
mad r1.y, v1.y, cb7[1].y, cb7[1].z
mul r2.y, r1.y, v2.y
mul r1.y, cb0[7].y, cb0[7].x
lt r1.y, l(0.000000), r1.y
dp3 r1.z, r2.xyzx, r2.xyzx
sqrt r1.z, r1.z
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb5[1].z
mad r1.w, -r1.w, l(0.250000), r2.y
max r1.w, r1.w, l(0.000000)
mul r1.w, r1.w, cb5[1].z
ne r2.w, r1.w, l(0.000000)
log r3.x, r1.w
mul r3.x, r3.x, cb5[1].w
exp r3.x, r3.x
movc r1.w, r2.w, r3.x, r1.w
add r3.x, r0.x, v2.w
mad r3.y, v2.w, l(0.800000), r0.y
add r0.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
frc r0.xy, r0.xyxx
mad r0.xy, r0.xyxx, l(2.000000, 2.000000, 0.000000, 0.000000), l(-1.000000, -1.000000, 0.000000, 0.000000)
mul r3.xy, |r0.xyxx|, |r0.xyxx|
mad r0.xy, -|r0.xyxx|, l(2.000000, 2.000000, 0.000000, 0.000000), l(3.000000, 3.000000, 0.000000, 0.000000)
mad r0.xy, r3.xyxx, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r0.xy, r0.xyxx, r0.xyxx
mad r0.x, r0.y, r0.y, r0.x
div r0.y, cb5[6].x, cb5[1].z
mad r0.x, cb5[1].y, r0.x, r0.y
mul r0.x, r1.w, r0.x
mad r3.xz, cb5[0].xxzx, r0.xxxx, r2.xxzx
mov r3.y, r2.y
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r3.xyz, r0.xxxx, r3.xyzx
mul r3.xyz, r1.zzzz, r3.xyzx
movc r1.yzw, r1.yyyy, r3.xxyz, r2.xxyz
add r1.yzw, r1.yyzw, v0.xxyz
add r0.x, r1.x, v2.z
mad r0.x, r0.x, cb7[0].y, l(0.500000)
round_ni r0.x, r0.x
div r0.x, r0.x, cb7[0].x
ge r0.y, r0.x, -r0.x
frc r0.x, |r0.x|
movc r0.x, r0.y, r0.x, -r0.x
mul r0.x, r0.x, cb7[0].x
ftou r0.x, r0.x
lt r0.y, cb7[r0.x + 2].w, l(0.000000)
mad r2.xy, -cb7[r0.x + 2].zwzz, v1.yxyy, cb7[r0.x + 2].xyxx
mad r2.zw, cb7[r0.x + 2].zzzw, v1.xxxy, cb7[r0.x + 2].xxxy
movc o1.yz, r0.yyyy, r2.xxyx, r2.zzwz
mul r2.xyz, r1.zzzz, cb3[1].xywx
mad r2.xyz, cb3[0].xywx, r1.yyyy, r2.xyzx
mad r2.xyz, cb3[2].xywx, r1.wwww, r2.xyzx
add r2.xyz, r2.xyzx, cb3[3].xywx
mul r3.xz, r2.xxzx, l(0.500000, 0.000000, 0.500000, 0.000000)
mul r0.x, r2.y, cb1[5].x
mul r3.w, r0.x, l(0.500000)
add r0.xy, r3.zzzz, r3.xwxx
mul r2.xy, cb1[6].xyxx, l(0.250000, 0.250000, 0.000000, 0.000000)
mul o3.xy, r0.xyxx, r2.xyxx
mul r2.xyw, r1.zzzz, cb3[5].xyxz
mad r2.xyw, cb3[4].xyxz, r1.yyyy, r2.xyxw
mad r2.xyw, cb3[6].xyxz, r1.wwww, r2.xyxw
add r2.xyw, r2.xyxw, cb3[7].xyxz
mul r0.xyz, -r0.zzzz, cb3[10].xyzx
mad r0.xyz, cb3[8].xyzx, r0.wwww, r0.xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
add r3.xyz, cb4[0].xyzx, cb4[0].xyzx
mov r4.xyz, r3.xyzx
mov r0.w, l(0)
loop 
  ige r1.x, r0.w, l(4)
  breakc_nz r1.x
  mad r5.xyz, -r2.xywx, cb2[r0.w + 14].wwww, cb2[r0.w + 14].xyzx
  dp3 r1.x, r5.xyzx, r5.xyzx
  rsq r3.w, r1.x
  mul r5.xyz, r3.wwww, r5.xyzx
  mad r1.x, r1.x, cb2[r0.w + 22].z, l(1.000000)
  div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
  dp3 r3.w, r5.xyzx, cb2[r0.w + 30].xyzx
  max r3.w, r3.w, l(0.000000)
  add r3.w, r3.w, -cb2[r0.w + 22].x
  mul_sat r3.w, r3.w, cb2[r0.w + 22].y
  mul r1.x, r1.x, r3.w
  dp3 r3.w, r0.xyzx, r5.xyzx
  max r3.w, r3.w, l(0.000000)
  mul r1.x, r1.x, r3.w
  mad r4.xyz, cb2[r0.w + 6].xyzx, r1.xxxx, r4.xyzx
  iadd r0.w, r0.w, l(1)
endloop 
mul o2.xyz, r4.xyzx, cb0[8].xyzx
mul r0.xyzw, r1.zzzz, cb3[1].xyzw
mad r0.xyzw, cb3[0].xyzw, r1.yyyy, r0.xyzw
mad r0.xyzw, cb3[2].xyzw, r1.wwww, r0.xyzw
add r0.xyzw, r0.xyzw, cb3[3].xyzw
mov o0.xyzw, r0.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed e75959f6bd9eeca4-vs.txt
ne r6.w, r0.w, l(1.0)
if_nz r6.w
  add r6.w, r0.w, -r6.y
  mad r0.x, r6.w, r6.x, r0.x
endif

mov o1.x, r0.z
mov o1.w, l(0)
mov o2.w, cb0[8].w
mov o3.z, r2.z
ret 
// Approximately 0 instruction slots used