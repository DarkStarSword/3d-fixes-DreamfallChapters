// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c74ff3dc8f476679-ps.txt
// 3DMigoto: c74ff3dc8f476679 |    Unity headers extracted from Additive-Fresnel.shader
//    Shader "Dreamfall/FX/Fresnel Additive" {
//      Properties {
//       _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" { }
//       _FresnelExp ("Fresnel Exp", Float) = 3.500000
//       _FresnelCol ("Fresnel Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _FresnelAmt ("Fresnel Amount", Float) = 1.000000
//      }
//      Fallback "Specular"
//      SubShader 1/1 {
//        Tags { "QUEUE"="Transparent" "RenderType"="Transparent" }
//        Pass 1/5 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "SHADOWSUPPORT"="true" "RenderType"="Transparent" }
//          ZWrite Off
//          Blend One One
//          GpuProgramID 4871
//          Program "fp" {
//            SubProgram "d3d11 " {
//              GpuProgramIndex 119
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from Additive-Fresnel.shader.decompressed:
//   API d3d11
//   Shader model ps_4_0
//   undeciphered1: 201510240 55 5 0
//   Keywords { "DIRECTIONAL" "LIGHTMAP_ON" "DIRLIGHTMAP_SEPARATE" "DYNAMICLIGHTMAP_OFF" "FOG_EXP" }
//   undeciphered2: 1 3 3 2 0 0
//   undeciphered3: 0 0
//   ConstBuffer "$Globals" 192
//   Vector 64 [unity_Lightmap_HDR]
//   Vector 128 [_Color]
//   Vector 144 [_FresnelCol]
//   Float 164 [_FresnelExp]
//   Float 168 [_FresnelAmt]
//   ConstBuffer "UnityPerCamera" 144
//   Vector 64 [_WorldSpaceCameraPos] 3
//   ConstBuffer "UnityFog" 32
//   Vector 0 [unity_FogColor]
//   Vector 16 [unity_FogParams]
//   SetTexture 0 [_MainTex] 2D 1
//   SetTexture 1 [unity_Lightmap] 2D 0
//   SetTexture 2 [unity_LightmapInd] 2D -1
//   BindCB "$Globals" 0
//   BindCB "UnityPerCamera" 1
//   BindCB "UnityFog" 2
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 06:53:58 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 5     z         1     NONE   float     z 
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyzw        4     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_4_0
dcl_constantbuffer cb0[11], immediateIndexed
dcl_constantbuffer cb1[9], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v1.z
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 10
dcl_constantbuffer cb10[4], immediateIndexed
dcl_constantbuffer cb11[22], immediateIndexed

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r5.xyzw, l(0, 0, 0, 0), t125.xyzw


// Unity reflection/specular fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --fix-unity-reflection --only-autofixed c74ff3dc8f476679-ps.txt
mov r6.xyzw, cb1[4].xyzw
mov r7.xyzw, l(0)
mul r7.x, -r5.x, r5.y
mul r9.xyzw, cb10[0].xyzw, r7.xxxx
mad r9.xyzw, cb10[1].xyzw, r7.yyyy, r9.xyzw
mad r9.xyzw, cb10[2].xyzw, r7.zzzz, r9.xyzw
mad r9.xyzw, cb10[3].xyzw, r7.wwww, r9.xyzw
mul r8.xyzw, cb11[12].xyzw, r9.xxxx
mad r8.xyzw, cb11[13].xyzw, r9.yyyy, r8.xyzw
mad r8.xyzw, cb11[14].xyzw, r9.zzzz, r8.xyzw
mad r8.xyzw, cb11[15].xyzw, r9.wwww, r8.xyzw
add r6.xyz, r6.xyz, -r8.xyz

add r0.xy, v4.xyxx, l(0.500000, 0.000000, 0.000000, 0.000000)
sample r1.xyzw, r0.xyxx, t1.xyzw, s0
sample r0.xyzw, r0.xyxx, t2.xyzw, s0
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
log r0.w, r1.w
mul r0.w, r0.w, cb0[4].y
exp r0.w, r0.w
mul r0.w, r0.w, cb0[4].x
mul r1.xyz, r1.xyzx, r0.wwww
dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r0.w, r0.w
max r0.w, r0.w, l(0.001000)
add r1.w, -r0.w, l(1.000000)
mul r2.xyz, r1.wwww, r1.xyzx
mul r1.xyz, r0.wwww, r1.xyzx
div r0.xyz, r0.xyzx, r0.wwww
dp3 r0.x, v2.xyzx, r0.xyzx
max r0.x, r0.x, l(0.000000)
mul r0.yzw, r0.xxxx, r2.xxyz
sample r2.xyzw, v4.xyxx, t1.xyzw, s0
log r1.w, r2.w
mul r1.w, r1.w, cb0[4].y
exp r1.w, r1.w
mul r1.w, r1.w, cb0[4].x
mul r2.xyz, r2.xyzx, r1.wwww
sample r3.xyzw, v4.xyxx, t2.xyzw, s0
mad r3.xyz, r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r1.w, r3.xyzx, r3.xyzx
sqrt r1.w, r1.w
max r1.w, r1.w, l(0.001000)
add r2.w, -r1.w, l(1.000000)
mul r4.xyz, r2.wwww, r2.xyzx
mul r2.xyz, r1.wwww, r2.xyzx
div r3.xyz, r3.xyzx, r1.wwww
dp3 r1.w, v2.xyzx, r3.xyzx
max r1.w, r1.w, l(0.000000)
mad r0.yzw, r4.xxyz, r1.wwww, r0.yyzw
sample r3.xyzw, v1.xyxx, t0.xyzw, s1
mul r4.xyz, r3.xyzx, cb0[8].xyzx
mul r1.xyz, r1.xyzx, r4.xyzx
mul r1.xyz, r0.xxxx, r1.xyzx
mul r2.xyz, r2.xyzx, r4.xyzx
mad r1.xyz, r2.xyzx, r1.wwww, r1.xyzx
mad r0.xyz, r4.xyzx, r0.yzwy, r1.xyzx
add r1.xyz, -v3.xyzx, r6.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, v2.xyzx, r1.xyzx
log r0.w, r0.w
mul r0.w, r0.w, cb0[10].y
exp r0.w, r0.w
mul_sat r0.w, r0.w, cb0[10].z
mul r1.xyz, r0.wwww, cb0[9].xyzx
mad r0.xyz, r3.xyzx, r1.xyzx, r0.xyzx
add r0.xyz, r0.xyzx, -cb2[0].xyzx
mul r0.w, v1.z, cb2[1].y
exp r0.w, -r0.w
min r0.w, r0.w, l(1.000000)
mad o0.xyz, r0.wwww, r0.xyzx, cb2[0].xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 0 instruction slots used