// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed ab644e4194cd566d-vs.txt
// 3DMigoto: ab644e4194cd566d |    Unity headers extracted from HighPrecisionDepthMap.shader
//    Shader "Hidden/SSAO Pro - High Precision Depth Map" {
//      Properties {
//       _MainTex ("", 2D) = "white" { }
//       _Cutoff ("", Float) = 0.500000
//       _Color ("", Color) = (1.000000,1.000000,1.000000,1.000000)
//      }
//      Fallback Off
//      SubShader 2/9 {
//        Tags { "RenderType"="TransparentCutout" }
//        Pass 1/1 {
//          Tags { "RenderType"="TransparentCutout" }
//          GpuProgramID 98029
//          Program "vp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 7
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from HighPrecisionDepthMap.shader.decompressed:
//   API d3d11_9x
//   Shader model vs_4_0_level_9_1
//   undeciphered1: 201510240 5 0 0
//   undeciphered2: 1 0 2 0 0 0
//   undeciphered3: 9 2 0 0 3 4
//   ConstBuffer "$Globals" 144
//   Vector 96 [_MainTex_ST]
//   ConstBuffer "UnityPerDraw" 352
//   Matrix 0 [glstate_matrix_mvp]
//   BindCB "$Globals" 0
//   BindCB "UnityPerDraw" 1
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 06:46:48 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 0   xyzw        2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1     zw        1     NONE   float     zw
// TEXCOORD                 2   xyz         2     NONE   float       
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c1         cb0             6         1  ( FLT, FLT, FLT, FLT)
// c2         cb1             0         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c0                              Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    dcl_texcoord v0
    dcl_texcoord2 v2
    mad oT0.xy, v2, c1, c1.zwzw
    mul r0, v0.y, c3
    mad r0, c2, v0.x, r0
    mad r0, c4, v0.z, r0
    mad r0, c5.xywz, v0.w, r0.xywz
    mad oPos.xy, r0.z, c0, r0
    mov oPos.zw, r0.xywz
    mov oT0.zw, r0

// approximately 8 instruction slots used
vs_4_0
dcl_constantbuffer cb0[7], immediateIndexed
dcl_constantbuffer cb1[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
dcl_output o1.zw
dcl_temps 2

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r1.xyzw, l(0, 0, 0, 0), t125.xyzw

mul r0.xyzw, v0.yyyy, cb1[1].xyzw
mad r0.xyzw, cb1[0].xyzw, v0.xxxx, r0.xyzw
mad r0.xyzw, cb1[2].xyzw, v0.zzzz, r0.xyzw
mad r0.xyzw, cb1[3].xyzw, v0.wwww, r0.xyzw
mov o0.xyzw, r0.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed ab644e4194cd566d-vs.txt
ne r1.w, r0.w, l(1.0)
if_nz r1.w
  add r1.w, r0.w, -r1.y
  mad r0.x, r1.w, r1.x, r0.x
endif

mov o1.zw, r0.zzzw
mad o1.xy, v2.xyxx, cb0[6].xyxx, cb0[6].zwzz
ret 
// Approximately 0 instruction slots used