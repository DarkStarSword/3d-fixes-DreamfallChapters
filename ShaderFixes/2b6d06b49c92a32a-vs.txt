// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 2b6d06b49c92a32a-vs.txt
// 3DMigoto: 2b6d06b49c92a32a |    Unity headers extracted from SpeedTreeBillboard.shader
//    Shader "Nature/SpeedTree Billboard" {
//      Properties {
//       _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
//       _SpecColor ("Specular Color", Color) = (0.500000,0.500000,0.500000,0.000000)
//       _HueVariation ("Hue Variation", Color) = (1.000000,0.500000,0.000000,0.100000)
//       _MainTex ("Base (RGB)", 2D) = "white" { }
//       _BumpMap ("Normalmap", 2D) = "bump" { }
//       _Cutoff ("Alpha cutoff", Range(0.000000,1.000000)) = 0.500000
//      [MaterialEnum(None,0,Fastest,1)]  _WindQuality ("Wind Quality", Range(0.000000,1.000000)) = 0.000000
//      }
//      Fallback "Transparent/Cutout/VertexLit"
//      SubShader 2/2 {
//        LOD 400
//        Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//        Pass 2/6 {
//          Name "FORWARD"
//          Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
//          ZWrite Off
//          Cull Off
//          Blend One One
//          GpuProgramID 529768
//          Program "vp" {
//            SubProgram "d3d11_9x " {
//              GpuProgramIndex 3232
//            }
//          }
//        }
//      }
//    }
//
// Unity 5.3 headers extracted from SpeedTreeBillboard.shader.decompressed:
//   API d3d11_9x
//   Shader model vs_4_0_level_9_1
//   undeciphered1: 201510240 49 0 0
//   Keywords { "DIRECTIONAL" "FOG_LINEAR" "EFFECT_BUMP" }
//   undeciphered2: 1 0 5 0 0 0
//   undeciphered3: 25 3 0 0 3 4 4 5
//   ConstBuffer "$Globals" 160
//   Vector 144 [_Color]
//   ConstBuffer "UnityPerDraw" 352
//   Vector 336 [unity_WorldTransformParams]
//   Matrix 0 [glstate_matrix_mvp]
//   Matrix 192 [unity_ObjectToWorld]
//   Matrix 256 [unity_WorldToObject]
//   ConstBuffer "UnityFog" 32
//   Vector 16 [unity_FogParams]
//   ConstBuffer "UnityBillboardPerCamera" 48
//   Vector 0 [unity_BillboardNormal] 3
//   Vector 16 [unity_BillboardTangent] 3
//   Vector 32 [unity_BillboardCameraParams]
//   ConstBuffer "UnityBillboardPerBatch" 288
//   Vector 0 [unity_BillboardInfo]
//   Vector 16 [unity_BillboardSize]
//   Vector 32 [unity_BillboardImageTexCoords0]
//   Vector 48 [unity_BillboardImageTexCoords1]
//   Vector 64 [unity_BillboardImageTexCoords2]
//   Vector 80 [unity_BillboardImageTexCoords3]
//   Vector 96 [unity_BillboardImageTexCoords4]
//   Vector 112 [unity_BillboardImageTexCoords5]
//   Vector 128 [unity_BillboardImageTexCoords6]
//   Vector 144 [unity_BillboardImageTexCoords7]
//   Vector 160 [unity_BillboardImageTexCoords8]
//   Vector 176 [unity_BillboardImageTexCoords9]
//   Vector 192 [unity_BillboardImageTexCoords10]
//   Vector 208 [unity_BillboardImageTexCoords11]
//   Vector 224 [unity_BillboardImageTexCoords12]
//   Vector 240 [unity_BillboardImageTexCoords13]
//   Vector 256 [unity_BillboardImageTexCoords14]
//   Vector 272 [unity_BillboardImageTexCoords15]
//   BindCB "$Globals" 0
//   BindCB "UnityPerDraw" 1
//   BindCB "UnityFog" 2
//   BindCB "UnityBillboardPerCamera" 3
//   BindCB "UnityBillboardPerBatch" 4
//
// Headers extracted with DarkStarSword's extract_unity53_shaders.py
// https://github.com/DarkStarSword/3d-fixes

//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.2.52 on Tue Jan 31 06:12:19 2017
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// TEXCOORD                 1   xyzw        2     NONE   float   xyz 
// NORMAL                   0   xyz         3     NONE   float       
// TANGENT                  0   xyzw        4     NONE   float       
// COLOR                    0   xyzw        5     NONE   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz 
// TEXCOORD                 7      w        1     NONE   float      w
// TEXCOORD                 1   xyz         2     NONE   float   xyz 
// TEXCOORD                 2   xyz         3     NONE   float   xyz 
// TEXCOORD                 3   xyz         4     NONE   float   xyz 
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz 
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb4             0        18  ( FLT, FLT, FLT, FLT)
// c19        cb0             9         1  ( FLT, FLT, FLT, FLT)
// c20        cb1             0         4  ( FLT, FLT, FLT, FLT)
// c24        cb1            12         7  ( FLT, FLT, FLT, FLT)
// c31        cb1            21         1  ( FLT, FLT, FLT, FLT)
// c32        cb2             1         1  ( FLT, FLT, FLT, FLT)
// c33        cb3             0         3  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c18                             Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c36, -0.5, 0.5, 0, 0
    dcl_texcoord v0
    dcl_texcoord1 v1
    dcl_texcoord2 v2
    add r0.x, v2.z, c35.w
    mov r0.yz, c36
    mad r0.x, r0.x, c0.y, r0.y
    frc r0.y, r0.x
    add r0.x, -r0.y, r0.x
    rcp r0.y, c0.x
    mul r0.x, r0.y, r0.x
    abs r0.y, r0.x
    sge r0.x, r0.x, -r0.x
    frc r0.y, r0.y
    lrp r1.x, r0.x, r0.y, -r0.y
    mul r0.x, r1.x, c0.x
    frc r0.y, r0.x
    add r0.x, r0.x, -r0.y
    mova a0.x, r0.x
    mad r0.xy, c2[a0.x].zwzw, -v1.yxzw, c2[a0.x]
    mad r1.xy, c2[a0.x].zwzw, v1, c2[a0.x]
    slt r0.z, c2[a0.x].w, r0.z
    add r0.xy, r0, -r1
    mad oT5.xy, r0.z, r0, r1
    add r0.x, v1.x, c36.x
    mul r0.x, r0.x, c1.x
    mul r0.x, r0.x, v2.x
    mul r0.xyz, r0.x, c34
    mad r1.x, v1.y, c1.y, c1.z
    mad r0.w, r1.x, v2.y, r0.y
    add r0.xyz, r0.xwzw, v0
    mul r1.xyz, r0.y, c25
    mad r1.xyz, c24, r0.x, r1
    mad r1.xyz, c26, r0.z, r1
    add oT3.xyz, r1, c27
    mul r1, r0.y, c21
    mad r1, c20, r0.x, r1
    mad r0, c22, r0.z, r1
    add r0, r0, c23
    mad oT0.w, r0.z, c32.z, c32.w
    mad oPos.xy, r0.w, c18, r0
    mov oPos.zw, r0
    mov r0.xyz, c34
    mul r1.xyz, r0.y, c25.yzxw
    mad r0.xyw, c24.yzzx, r0.x, r1.xyzz
    mad r0.xyz, c26.yzxw, r0.z, r0.xyww
    dp3 r0.w, r0, r0
    rsq r0.w, r0.w
    mul r0.xyz, r0.w, r0
    mov oT0.x, r0.z
    mov r1.xyz, c33
    mul r2.y, r1.x, c28.x
    mul r2.z, r1.x, c29.x
    mul r2.x, r1.x, c30.x
    mul r3.y, r1.y, c28.y
    mul r3.z, r1.y, c29.y
    mul r3.x, r1.y, c30.y
    add r1.xyw, r2.xyzz, r3.xyzz
    mul r2.y, r1.z, c28.z
    mul r2.z, r1.z, c29.z
    mul r2.x, r1.z, c30.z
    add r1.xyz, r1.xyww, r2
    dp3 r0.w, r1, r1
    rsq r0.w, r0.w
    mul r1.xyz, r0.w, r1
    mul r2.xyz, r0, r1
    mad r2.xyz, r1.zxyw, r0.yzxw, -r2
    mul r2.xyz, r2, -c31.w
    mov oT0.y, r2.x
    mov oT0.z, r1.y
    mov oT1.x, r0.x
    mov oT2.x, r0.y
    mov oT1.y, r2.y
    mov oT2.y, r2.z
    mov oT1.z, r1.z
    mov oT2.z, r1.x
    mov oT4, c19
    mov oT5.z, c36.z

// approximately 74 instruction slots used
vs_4_0
dcl_constantbuffer cb0[10], immediateIndexed
dcl_constantbuffer cb1[22], immediateIndexed
dcl_constantbuffer cb2[2], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb4[18], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xy
dcl_input v2.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o1.w
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyz
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_temps 5

// 3DMigoto StereoParams:
dcl_resource_texture2d (float,float,float,float) t125

ld_indexable(texture2d)(float,float,float,float) r4.xyzw, l(0, 0, 0, 0), t125.xyzw

add r0.x, v1.x, l(-0.500000)
mul r0.x, r0.x, cb4[1].x
mul r0.x, r0.x, v2.x
mul r0.xyz, r0.xxxx, cb3[1].xyzx
mad r1.x, v1.y, cb4[1].y, cb4[1].z
mad r0.w, r1.x, v2.y, r0.y
add r0.xyz, r0.xwzx, v0.xyzx
mul r1.xyzw, r0.yyyy, cb1[1].xyzw
mad r1.xyzw, cb1[0].xyzw, r0.xxxx, r1.xyzw
mad r1.xyzw, cb1[2].xyzw, r0.zzzz, r1.xyzw
add r1.xyzw, r1.xyzw, cb1[3].xyzw
mov o0.xyzw, r1.xyzw

// Automatic vertex shader halo fix inserted with DarkStarSword's asmtool.py:
// asmtool.py -I ../.. --auto-fix-vertex-halo --fix-unusual-halo-with-inconsistent-w-optimisation --fix-unity-reflection --fix-unity-frustum-world --only-autofixed 2b6d06b49c92a32a-vs.txt
ne r4.w, r1.w, l(1.0)
if_nz r4.w
  add r4.w, r1.w, -r4.y
  mad r1.x, r4.w, r4.x, r1.x
endif

mad o1.w, r1.z, cb2[1].z, cb2[1].w
mul r1.y, cb1[16].x, cb3[0].x
mul r1.z, cb1[17].x, cb3[0].x
mul r1.x, cb1[18].x, cb3[0].x
mul r2.y, cb1[16].y, cb3[0].y
mul r2.z, cb1[17].y, cb3[0].y
mul r2.x, cb1[18].y, cb3[0].y
add r1.xyz, r1.xyzx, r2.xyzx
mul r2.y, cb1[16].z, cb3[0].z
mul r2.z, cb1[17].z, cb3[0].z
mul r2.x, cb1[18].z, cb3[0].z
add r1.xyz, r1.xyzx, r2.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
mov o1.z, r1.y
mul r2.xyz, cb1[13].yzxy, cb3[1].yyyy
mad r2.xyz, cb1[12].yzxy, cb3[1].xxxx, r2.xyzx
mad r2.xyz, cb1[14].yzxy, cb3[1].zzzz, r2.xyzx
dp3 r0.w, r2.xyzx, r2.xyzx
rsq r0.w, r0.w
mul r2.xyz, r0.wwww, r2.xyzx
mul r3.xyz, r1.xyzx, r2.xyzx
mad r3.xyz, r1.zxyz, r2.yzxy, -r3.xyzx
mul r3.xyz, r3.xyzx, -cb1[21].wwww
mov o1.y, r3.x
mov o1.x, r2.z
mov o2.z, r1.z
mov o3.z, r1.x
mov o2.x, r2.x
mov o3.x, r2.y
mov o2.y, r3.y
mov o3.y, r3.z
mul r1.xyz, r0.yyyy, cb1[13].xyzx
mad r0.xyw, cb1[12].xyxz, r0.xxxx, r1.xyxz
mad r0.xyz, cb1[14].xyzx, r0.zzzz, r0.xywx
add o4.xyz, r0.xyzx, cb1[15].xyzx
mov o5.xyzw, cb0[9].xyzw
add r0.x, v2.z, cb3[2].w
mad r0.x, r0.x, cb4[0].y, l(0.500000)
round_ni r0.x, r0.x
div r0.x, r0.x, cb4[0].x
ge r0.y, r0.x, -r0.x
frc r0.x, |r0.x|
movc r0.x, r0.y, r0.x, -r0.x
mul r0.x, r0.x, cb4[0].x
ftou r0.x, r0.x
lt r0.y, cb4[r0.x + 2].w, l(0.000000)
mad r0.zw, -cb4[r0.x + 2].zzzw, v1.yyyx, cb4[r0.x + 2].xxxy
mad r1.xy, cb4[r0.x + 2].zwzz, v1.xyxx, cb4[r0.x + 2].xyxx
movc o6.xy, r0.yyyy, r0.zwzz, r1.xyxx
mov o6.z, l(0)
ret 
// Approximately 0 instruction slots used